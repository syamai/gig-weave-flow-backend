// Gig Weave Flow Database Schema
// Prisma ORM for Supabase PostgreSQL

generator client {
  provider = "prisma-client"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  passwordHash  String   @map("password_hash")
  fullName      String?  @map("full_name")
  avatarUrl     String?  @map("avatar_url")
  role          Role     @default(USER)
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  profile    Profile?
  projects   Project[] @relation("ClientProjects")
  proposals  Proposal[]
  contracts  Contract[] @relation("ClientContracts")
  contracts2 Contract[] @relation("FreelancerContracts")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications    Notification[]
  reviewsGiven     Review[] @relation("ReviewsGiven")
  reviewsReceived  Review[] @relation("ReviewsReceived")
  fileUploads       FileUpload[]

  @@map("users")
}

model Profile {
  id           String   @id @default(uuid())
  userId       String   @unique @map("user_id")
  bio          String?
  skills       String[]
  hourlyRate   Decimal? @map("hourly_rate") @db.Decimal(10, 2)
  availability String   @default("available")
  location     String?
  websiteUrl   String?  @map("website_url")
  linkedinUrl  String?  @map("linkedin_url")
  githubUrl    String?  @map("github_url")
  portfolioUrl String?  @map("portfolio_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Project {
  id             String      @id @default(uuid())
  clientId       String      @map("client_id")
  title          String
  description    String
  budget         Decimal?    @db.Decimal(10, 2)
  currency       String      @default("USD")
  status         ProjectStatus @default(OPEN)
  category       String?
  skillsRequired String[]    @map("skills_required")
  deadline       DateTime?
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  client     User        @relation("ClientProjects", fields: [clientId], references: [id], onDelete: Cascade)
  proposals  Proposal[]
  contracts  Contract[]
  messages   Message[]
  reviews    Review[]
  fileUploads FileUpload[]

  @@map("projects")
}

model Proposal {
  id               String         @id @default(uuid())
  projectId        String         @map("project_id")
  freelancerId     String         @map("freelancer_id")
  message          String
  proposedBudget   Decimal?       @map("proposed_budget") @db.Decimal(10, 2)
  estimatedDuration Int?          @map("estimated_duration")
  status           ProposalStatus @default(PENDING)
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")

  // Relations
  project    Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  freelancer User      @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  contracts  Contract[]

  @@map("proposals")
}

model Contract {
  id           String        @id @default(uuid())
  projectId    String        @map("project_id")
  clientId     String        @map("client_id")
  freelancerId String        @map("freelancer_id")
  proposalId   String        @map("proposal_id")
  contractAmount Decimal     @map("contract_amount") @db.Decimal(10, 2)
  currency     String        @default("USD")
  status       ContractStatus @default(ACTIVE)
  startDate    DateTime?     @map("start_date")
  endDate      DateTime?     @map("end_date")
  terms        String?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  client     User    @relation("ClientContracts", fields: [clientId], references: [id], onDelete: Cascade)
  freelancer User    @relation("FreelancerContracts", fields: [freelancerId], references: [id], onDelete: Cascade)
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Message {
  id          String      @id @default(uuid())
  senderId    String      @map("sender_id")
  receiverId  String      @map("receiver_id")
  projectId   String?     @map("project_id")
  content     String
  messageType MessageType @default(TEXT) @map("message_type")
  isRead      Boolean     @default(false) @map("is_read")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  sender   User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  project  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id          String           @id @default(uuid())
  userId      String           @map("user_id")
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false) @map("is_read")
  relatedId   String?          @map("related_id")
  relatedType String?          @map("related_type")
  createdAt   DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Review {
  id          String   @id @default(uuid())
  reviewerId  String   @map("reviewer_id")
  revieweeId  String   @map("reviewee_id")
  projectId   String   @map("project_id")
  rating      Int
  comment     String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  reviewer  User    @relation("ReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee  User    @relation("ReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model TechStack {
  id          String   @id @default(uuid())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("tech_stacks")
}

model FileUpload {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  projectId    String?  @map("project_id")
  filename     String
  originalName String   @map("original_name")
  fileSize     Int      @map("file_size")
  mimeType     String   @map("mime_type")
  filePath     String   @map("file_path")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("file_uploads")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum ProjectStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ContractStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  DISPUTED
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}
