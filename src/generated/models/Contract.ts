
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Contract` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Contract
 * 
 */
export type ContractModel = runtime.Types.Result.DefaultSelection<Prisma.$ContractPayload>

export type AggregateContract = {
  _count: ContractCountAggregateOutputType | null
  _avg: ContractAvgAggregateOutputType | null
  _sum: ContractSumAggregateOutputType | null
  _min: ContractMinAggregateOutputType | null
  _max: ContractMaxAggregateOutputType | null
}

export type ContractAvgAggregateOutputType = {
  contractAmount: runtime.Decimal | null
}

export type ContractSumAggregateOutputType = {
  contractAmount: runtime.Decimal | null
}

export type ContractMinAggregateOutputType = {
  id: string | null
  projectId: string | null
  clientId: string | null
  freelancerId: string | null
  proposalId: string | null
  contractAmount: runtime.Decimal | null
  currency: string | null
  status: $Enums.ContractStatus | null
  startDate: Date | null
  endDate: Date | null
  terms: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContractMaxAggregateOutputType = {
  id: string | null
  projectId: string | null
  clientId: string | null
  freelancerId: string | null
  proposalId: string | null
  contractAmount: runtime.Decimal | null
  currency: string | null
  status: $Enums.ContractStatus | null
  startDate: Date | null
  endDate: Date | null
  terms: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContractCountAggregateOutputType = {
  id: number
  projectId: number
  clientId: number
  freelancerId: number
  proposalId: number
  contractAmount: number
  currency: number
  status: number
  startDate: number
  endDate: number
  terms: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ContractAvgAggregateInputType = {
  contractAmount?: true
}

export type ContractSumAggregateInputType = {
  contractAmount?: true
}

export type ContractMinAggregateInputType = {
  id?: true
  projectId?: true
  clientId?: true
  freelancerId?: true
  proposalId?: true
  contractAmount?: true
  currency?: true
  status?: true
  startDate?: true
  endDate?: true
  terms?: true
  createdAt?: true
  updatedAt?: true
}

export type ContractMaxAggregateInputType = {
  id?: true
  projectId?: true
  clientId?: true
  freelancerId?: true
  proposalId?: true
  contractAmount?: true
  currency?: true
  status?: true
  startDate?: true
  endDate?: true
  terms?: true
  createdAt?: true
  updatedAt?: true
}

export type ContractCountAggregateInputType = {
  id?: true
  projectId?: true
  clientId?: true
  freelancerId?: true
  proposalId?: true
  contractAmount?: true
  currency?: true
  status?: true
  startDate?: true
  endDate?: true
  terms?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ContractAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contract to aggregate.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Contracts
  **/
  _count?: true | ContractCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ContractAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ContractSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContractMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContractMaxAggregateInputType
}

export type GetContractAggregateType<T extends ContractAggregateArgs> = {
      [P in keyof T & keyof AggregateContract]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContract[P]>
    : Prisma.GetScalarType<T[P], AggregateContract[P]>
}




export type ContractGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContractWhereInput
  orderBy?: Prisma.ContractOrderByWithAggregationInput | Prisma.ContractOrderByWithAggregationInput[]
  by: Prisma.ContractScalarFieldEnum[] | Prisma.ContractScalarFieldEnum
  having?: Prisma.ContractScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContractCountAggregateInputType | true
  _avg?: ContractAvgAggregateInputType
  _sum?: ContractSumAggregateInputType
  _min?: ContractMinAggregateInputType
  _max?: ContractMaxAggregateInputType
}

export type ContractGroupByOutputType = {
  id: string
  projectId: string
  clientId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal
  currency: string
  status: $Enums.ContractStatus
  startDate: Date | null
  endDate: Date | null
  terms: string | null
  createdAt: Date
  updatedAt: Date
  _count: ContractCountAggregateOutputType | null
  _avg: ContractAvgAggregateOutputType | null
  _sum: ContractSumAggregateOutputType | null
  _min: ContractMinAggregateOutputType | null
  _max: ContractMaxAggregateOutputType | null
}

type GetContractGroupByPayload<T extends ContractGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContractGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContractGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContractGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContractGroupByOutputType[P]>
      }
    >
  >



export type ContractWhereInput = {
  AND?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  OR?: Prisma.ContractWhereInput[]
  NOT?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  id?: Prisma.StringFilter<"Contract"> | string
  projectId?: Prisma.StringFilter<"Contract"> | string
  clientId?: Prisma.StringFilter<"Contract"> | string
  freelancerId?: Prisma.StringFilter<"Contract"> | string
  proposalId?: Prisma.StringFilter<"Contract"> | string
  contractAmount?: Prisma.DecimalFilter<"Contract"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Contract"> | string
  status?: Prisma.EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
  startDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  terms?: Prisma.StringNullableFilter<"Contract"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  client?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  freelancer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  proposal?: Prisma.XOR<Prisma.ProposalScalarRelationFilter, Prisma.ProposalWhereInput>
}

export type ContractOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  proposalId?: Prisma.SortOrder
  contractAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  terms?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  client?: Prisma.UserOrderByWithRelationInput
  freelancer?: Prisma.UserOrderByWithRelationInput
  proposal?: Prisma.ProposalOrderByWithRelationInput
}

export type ContractWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  OR?: Prisma.ContractWhereInput[]
  NOT?: Prisma.ContractWhereInput | Prisma.ContractWhereInput[]
  projectId?: Prisma.StringFilter<"Contract"> | string
  clientId?: Prisma.StringFilter<"Contract"> | string
  freelancerId?: Prisma.StringFilter<"Contract"> | string
  proposalId?: Prisma.StringFilter<"Contract"> | string
  contractAmount?: Prisma.DecimalFilter<"Contract"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Contract"> | string
  status?: Prisma.EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
  startDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  terms?: Prisma.StringNullableFilter<"Contract"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  client?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  freelancer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  proposal?: Prisma.XOR<Prisma.ProposalScalarRelationFilter, Prisma.ProposalWhereInput>
}, "id">

export type ContractOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  proposalId?: Prisma.SortOrder
  contractAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startDate?: Prisma.SortOrderInput | Prisma.SortOrder
  endDate?: Prisma.SortOrderInput | Prisma.SortOrder
  terms?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ContractCountOrderByAggregateInput
  _avg?: Prisma.ContractAvgOrderByAggregateInput
  _max?: Prisma.ContractMaxOrderByAggregateInput
  _min?: Prisma.ContractMinOrderByAggregateInput
  _sum?: Prisma.ContractSumOrderByAggregateInput
}

export type ContractScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContractScalarWhereWithAggregatesInput | Prisma.ContractScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContractScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContractScalarWhereWithAggregatesInput | Prisma.ContractScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  clientId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  freelancerId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  proposalId?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  contractAmount?: Prisma.DecimalWithAggregatesFilter<"Contract"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringWithAggregatesFilter<"Contract"> | string
  status?: Prisma.EnumContractStatusWithAggregatesFilter<"Contract"> | $Enums.ContractStatus
  startDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Contract"> | Date | string | null
  terms?: Prisma.StringNullableWithAggregatesFilter<"Contract"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Contract"> | Date | string
}

export type ContractCreateInput = {
  id?: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutContractsInput
  client: Prisma.UserCreateNestedOneWithoutContractsInput
  freelancer: Prisma.UserCreateNestedOneWithoutContracts2Input
  proposal: Prisma.ProposalCreateNestedOneWithoutContractsInput
}

export type ContractUncheckedCreateInput = {
  id?: string
  projectId: string
  clientId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutContractsNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsNestedInput
  freelancer?: Prisma.UserUpdateOneRequiredWithoutContracts2NestedInput
  proposal?: Prisma.ProposalUpdateOneRequiredWithoutContractsNestedInput
}

export type ContractUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractCreateManyInput = {
  id?: string
  projectId: string
  clientId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractListRelationFilter = {
  every?: Prisma.ContractWhereInput
  some?: Prisma.ContractWhereInput
  none?: Prisma.ContractWhereInput
}

export type ContractOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ContractCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  proposalId?: Prisma.SortOrder
  contractAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  terms?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContractAvgOrderByAggregateInput = {
  contractAmount?: Prisma.SortOrder
}

export type ContractMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  proposalId?: Prisma.SortOrder
  contractAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  terms?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContractMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  clientId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  proposalId?: Prisma.SortOrder
  contractAmount?: Prisma.SortOrder
  currency?: Prisma.SortOrder
  status?: Prisma.SortOrder
  startDate?: Prisma.SortOrder
  endDate?: Prisma.SortOrder
  terms?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContractSumOrderByAggregateInput = {
  contractAmount?: Prisma.SortOrder
}

export type ContractCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractCreateNestedManyWithoutFreelancerInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutFreelancerInput, Prisma.ContractUncheckedCreateWithoutFreelancerInput> | Prisma.ContractCreateWithoutFreelancerInput[] | Prisma.ContractUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutFreelancerInput | Prisma.ContractCreateOrConnectWithoutFreelancerInput[]
  createMany?: Prisma.ContractCreateManyFreelancerInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUncheckedCreateNestedManyWithoutClientInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUncheckedCreateNestedManyWithoutFreelancerInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutFreelancerInput, Prisma.ContractUncheckedCreateWithoutFreelancerInput> | Prisma.ContractCreateWithoutFreelancerInput[] | Prisma.ContractUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutFreelancerInput | Prisma.ContractCreateOrConnectWithoutFreelancerInput[]
  createMany?: Prisma.ContractCreateManyFreelancerInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutClientInput | Prisma.ContractUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutClientInput | Prisma.ContractUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutClientInput | Prisma.ContractUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUpdateManyWithoutFreelancerNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutFreelancerInput, Prisma.ContractUncheckedCreateWithoutFreelancerInput> | Prisma.ContractCreateWithoutFreelancerInput[] | Prisma.ContractUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutFreelancerInput | Prisma.ContractCreateOrConnectWithoutFreelancerInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutFreelancerInput | Prisma.ContractUpsertWithWhereUniqueWithoutFreelancerInput[]
  createMany?: Prisma.ContractCreateManyFreelancerInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutFreelancerInput | Prisma.ContractUpdateWithWhereUniqueWithoutFreelancerInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutFreelancerInput | Prisma.ContractUpdateManyWithWhereWithoutFreelancerInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUncheckedUpdateManyWithoutClientNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput> | Prisma.ContractCreateWithoutClientInput[] | Prisma.ContractUncheckedCreateWithoutClientInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutClientInput | Prisma.ContractCreateOrConnectWithoutClientInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutClientInput | Prisma.ContractUpsertWithWhereUniqueWithoutClientInput[]
  createMany?: Prisma.ContractCreateManyClientInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutClientInput | Prisma.ContractUpdateWithWhereUniqueWithoutClientInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutClientInput | Prisma.ContractUpdateManyWithWhereWithoutClientInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUncheckedUpdateManyWithoutFreelancerNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutFreelancerInput, Prisma.ContractUncheckedCreateWithoutFreelancerInput> | Prisma.ContractCreateWithoutFreelancerInput[] | Prisma.ContractUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutFreelancerInput | Prisma.ContractCreateOrConnectWithoutFreelancerInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutFreelancerInput | Prisma.ContractUpsertWithWhereUniqueWithoutFreelancerInput[]
  createMany?: Prisma.ContractCreateManyFreelancerInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutFreelancerInput | Prisma.ContractUpdateWithWhereUniqueWithoutFreelancerInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutFreelancerInput | Prisma.ContractUpdateManyWithWhereWithoutFreelancerInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProjectInput, Prisma.ContractUncheckedCreateWithoutProjectInput> | Prisma.ContractCreateWithoutProjectInput[] | Prisma.ContractUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProjectInput | Prisma.ContractCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ContractCreateManyProjectInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProjectInput, Prisma.ContractUncheckedCreateWithoutProjectInput> | Prisma.ContractCreateWithoutProjectInput[] | Prisma.ContractUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProjectInput | Prisma.ContractCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ContractCreateManyProjectInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProjectInput, Prisma.ContractUncheckedCreateWithoutProjectInput> | Prisma.ContractCreateWithoutProjectInput[] | Prisma.ContractUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProjectInput | Prisma.ContractCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutProjectInput | Prisma.ContractUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ContractCreateManyProjectInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutProjectInput | Prisma.ContractUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutProjectInput | Prisma.ContractUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProjectInput, Prisma.ContractUncheckedCreateWithoutProjectInput> | Prisma.ContractCreateWithoutProjectInput[] | Prisma.ContractUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProjectInput | Prisma.ContractCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutProjectInput | Prisma.ContractUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ContractCreateManyProjectInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutProjectInput | Prisma.ContractUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutProjectInput | Prisma.ContractUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractCreateNestedManyWithoutProposalInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProposalInput, Prisma.ContractUncheckedCreateWithoutProposalInput> | Prisma.ContractCreateWithoutProposalInput[] | Prisma.ContractUncheckedCreateWithoutProposalInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProposalInput | Prisma.ContractCreateOrConnectWithoutProposalInput[]
  createMany?: Prisma.ContractCreateManyProposalInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUncheckedCreateNestedManyWithoutProposalInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProposalInput, Prisma.ContractUncheckedCreateWithoutProposalInput> | Prisma.ContractCreateWithoutProposalInput[] | Prisma.ContractUncheckedCreateWithoutProposalInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProposalInput | Prisma.ContractCreateOrConnectWithoutProposalInput[]
  createMany?: Prisma.ContractCreateManyProposalInputEnvelope
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
}

export type ContractUpdateManyWithoutProposalNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProposalInput, Prisma.ContractUncheckedCreateWithoutProposalInput> | Prisma.ContractCreateWithoutProposalInput[] | Prisma.ContractUncheckedCreateWithoutProposalInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProposalInput | Prisma.ContractCreateOrConnectWithoutProposalInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutProposalInput | Prisma.ContractUpsertWithWhereUniqueWithoutProposalInput[]
  createMany?: Prisma.ContractCreateManyProposalInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutProposalInput | Prisma.ContractUpdateWithWhereUniqueWithoutProposalInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutProposalInput | Prisma.ContractUpdateManyWithWhereWithoutProposalInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type ContractUncheckedUpdateManyWithoutProposalNestedInput = {
  create?: Prisma.XOR<Prisma.ContractCreateWithoutProposalInput, Prisma.ContractUncheckedCreateWithoutProposalInput> | Prisma.ContractCreateWithoutProposalInput[] | Prisma.ContractUncheckedCreateWithoutProposalInput[]
  connectOrCreate?: Prisma.ContractCreateOrConnectWithoutProposalInput | Prisma.ContractCreateOrConnectWithoutProposalInput[]
  upsert?: Prisma.ContractUpsertWithWhereUniqueWithoutProposalInput | Prisma.ContractUpsertWithWhereUniqueWithoutProposalInput[]
  createMany?: Prisma.ContractCreateManyProposalInputEnvelope
  set?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  disconnect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  delete?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  connect?: Prisma.ContractWhereUniqueInput | Prisma.ContractWhereUniqueInput[]
  update?: Prisma.ContractUpdateWithWhereUniqueWithoutProposalInput | Prisma.ContractUpdateWithWhereUniqueWithoutProposalInput[]
  updateMany?: Prisma.ContractUpdateManyWithWhereWithoutProposalInput | Prisma.ContractUpdateManyWithWhereWithoutProposalInput[]
  deleteMany?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type EnumContractStatusFieldUpdateOperationsInput = {
  set?: $Enums.ContractStatus
}

export type ContractCreateWithoutClientInput = {
  id?: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutContractsInput
  freelancer: Prisma.UserCreateNestedOneWithoutContracts2Input
  proposal: Prisma.ProposalCreateNestedOneWithoutContractsInput
}

export type ContractUncheckedCreateWithoutClientInput = {
  id?: string
  projectId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractCreateOrConnectWithoutClientInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput>
}

export type ContractCreateManyClientInputEnvelope = {
  data: Prisma.ContractCreateManyClientInput | Prisma.ContractCreateManyClientInput[]
  skipDuplicates?: boolean
}

export type ContractCreateWithoutFreelancerInput = {
  id?: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutContractsInput
  client: Prisma.UserCreateNestedOneWithoutContractsInput
  proposal: Prisma.ProposalCreateNestedOneWithoutContractsInput
}

export type ContractUncheckedCreateWithoutFreelancerInput = {
  id?: string
  projectId: string
  clientId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractCreateOrConnectWithoutFreelancerInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutFreelancerInput, Prisma.ContractUncheckedCreateWithoutFreelancerInput>
}

export type ContractCreateManyFreelancerInputEnvelope = {
  data: Prisma.ContractCreateManyFreelancerInput | Prisma.ContractCreateManyFreelancerInput[]
  skipDuplicates?: boolean
}

export type ContractUpsertWithWhereUniqueWithoutClientInput = {
  where: Prisma.ContractWhereUniqueInput
  update: Prisma.XOR<Prisma.ContractUpdateWithoutClientInput, Prisma.ContractUncheckedUpdateWithoutClientInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutClientInput, Prisma.ContractUncheckedCreateWithoutClientInput>
}

export type ContractUpdateWithWhereUniqueWithoutClientInput = {
  where: Prisma.ContractWhereUniqueInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutClientInput, Prisma.ContractUncheckedUpdateWithoutClientInput>
}

export type ContractUpdateManyWithWhereWithoutClientInput = {
  where: Prisma.ContractScalarWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyWithoutClientInput>
}

export type ContractScalarWhereInput = {
  AND?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
  OR?: Prisma.ContractScalarWhereInput[]
  NOT?: Prisma.ContractScalarWhereInput | Prisma.ContractScalarWhereInput[]
  id?: Prisma.StringFilter<"Contract"> | string
  projectId?: Prisma.StringFilter<"Contract"> | string
  clientId?: Prisma.StringFilter<"Contract"> | string
  freelancerId?: Prisma.StringFilter<"Contract"> | string
  proposalId?: Prisma.StringFilter<"Contract"> | string
  contractAmount?: Prisma.DecimalFilter<"Contract"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFilter<"Contract"> | string
  status?: Prisma.EnumContractStatusFilter<"Contract"> | $Enums.ContractStatus
  startDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  endDate?: Prisma.DateTimeNullableFilter<"Contract"> | Date | string | null
  terms?: Prisma.StringNullableFilter<"Contract"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contract"> | Date | string
}

export type ContractUpsertWithWhereUniqueWithoutFreelancerInput = {
  where: Prisma.ContractWhereUniqueInput
  update: Prisma.XOR<Prisma.ContractUpdateWithoutFreelancerInput, Prisma.ContractUncheckedUpdateWithoutFreelancerInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutFreelancerInput, Prisma.ContractUncheckedCreateWithoutFreelancerInput>
}

export type ContractUpdateWithWhereUniqueWithoutFreelancerInput = {
  where: Prisma.ContractWhereUniqueInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutFreelancerInput, Prisma.ContractUncheckedUpdateWithoutFreelancerInput>
}

export type ContractUpdateManyWithWhereWithoutFreelancerInput = {
  where: Prisma.ContractScalarWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyWithoutFreelancerInput>
}

export type ContractCreateWithoutProjectInput = {
  id?: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  client: Prisma.UserCreateNestedOneWithoutContractsInput
  freelancer: Prisma.UserCreateNestedOneWithoutContracts2Input
  proposal: Prisma.ProposalCreateNestedOneWithoutContractsInput
}

export type ContractUncheckedCreateWithoutProjectInput = {
  id?: string
  clientId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractCreateOrConnectWithoutProjectInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutProjectInput, Prisma.ContractUncheckedCreateWithoutProjectInput>
}

export type ContractCreateManyProjectInputEnvelope = {
  data: Prisma.ContractCreateManyProjectInput | Prisma.ContractCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ContractUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ContractWhereUniqueInput
  update: Prisma.XOR<Prisma.ContractUpdateWithoutProjectInput, Prisma.ContractUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutProjectInput, Prisma.ContractUncheckedCreateWithoutProjectInput>
}

export type ContractUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ContractWhereUniqueInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutProjectInput, Prisma.ContractUncheckedUpdateWithoutProjectInput>
}

export type ContractUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ContractScalarWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyWithoutProjectInput>
}

export type ContractCreateWithoutProposalInput = {
  id?: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutContractsInput
  client: Prisma.UserCreateNestedOneWithoutContractsInput
  freelancer: Prisma.UserCreateNestedOneWithoutContracts2Input
}

export type ContractUncheckedCreateWithoutProposalInput = {
  id?: string
  projectId: string
  clientId: string
  freelancerId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractCreateOrConnectWithoutProposalInput = {
  where: Prisma.ContractWhereUniqueInput
  create: Prisma.XOR<Prisma.ContractCreateWithoutProposalInput, Prisma.ContractUncheckedCreateWithoutProposalInput>
}

export type ContractCreateManyProposalInputEnvelope = {
  data: Prisma.ContractCreateManyProposalInput | Prisma.ContractCreateManyProposalInput[]
  skipDuplicates?: boolean
}

export type ContractUpsertWithWhereUniqueWithoutProposalInput = {
  where: Prisma.ContractWhereUniqueInput
  update: Prisma.XOR<Prisma.ContractUpdateWithoutProposalInput, Prisma.ContractUncheckedUpdateWithoutProposalInput>
  create: Prisma.XOR<Prisma.ContractCreateWithoutProposalInput, Prisma.ContractUncheckedCreateWithoutProposalInput>
}

export type ContractUpdateWithWhereUniqueWithoutProposalInput = {
  where: Prisma.ContractWhereUniqueInput
  data: Prisma.XOR<Prisma.ContractUpdateWithoutProposalInput, Prisma.ContractUncheckedUpdateWithoutProposalInput>
}

export type ContractUpdateManyWithWhereWithoutProposalInput = {
  where: Prisma.ContractScalarWhereInput
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyWithoutProposalInput>
}

export type ContractCreateManyClientInput = {
  id?: string
  projectId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractCreateManyFreelancerInput = {
  id?: string
  projectId: string
  clientId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutContractsNestedInput
  freelancer?: Prisma.UserUpdateOneRequiredWithoutContracts2NestedInput
  proposal?: Prisma.ProposalUpdateOneRequiredWithoutContractsNestedInput
}

export type ContractUncheckedUpdateWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUncheckedUpdateManyWithoutClientInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUpdateWithoutFreelancerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutContractsNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsNestedInput
  proposal?: Prisma.ProposalUpdateOneRequiredWithoutContractsNestedInput
}

export type ContractUncheckedUpdateWithoutFreelancerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUncheckedUpdateManyWithoutFreelancerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractCreateManyProjectInput = {
  id?: string
  clientId: string
  freelancerId: string
  proposalId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  client?: Prisma.UserUpdateOneRequiredWithoutContractsNestedInput
  freelancer?: Prisma.UserUpdateOneRequiredWithoutContracts2NestedInput
  proposal?: Prisma.ProposalUpdateOneRequiredWithoutContractsNestedInput
}

export type ContractUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  proposalId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractCreateManyProposalInput = {
  id?: string
  projectId: string
  clientId: string
  freelancerId: string
  contractAmount: runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: string
  status?: $Enums.ContractStatus
  startDate?: Date | string | null
  endDate?: Date | string | null
  terms?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContractUpdateWithoutProposalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutContractsNestedInput
  client?: Prisma.UserUpdateOneRequiredWithoutContractsNestedInput
  freelancer?: Prisma.UserUpdateOneRequiredWithoutContracts2NestedInput
}

export type ContractUncheckedUpdateWithoutProposalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContractUncheckedUpdateManyWithoutProposalInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  clientId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  contractAmount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  currency?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumContractStatusFieldUpdateOperationsInput | $Enums.ContractStatus
  startDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  endDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  terms?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ContractSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  clientId?: boolean
  freelancerId?: boolean
  proposalId?: boolean
  contractAmount?: boolean
  currency?: boolean
  status?: boolean
  startDate?: boolean
  endDate?: boolean
  terms?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  proposal?: boolean | Prisma.ProposalDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contract"]>

export type ContractSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  clientId?: boolean
  freelancerId?: boolean
  proposalId?: boolean
  contractAmount?: boolean
  currency?: boolean
  status?: boolean
  startDate?: boolean
  endDate?: boolean
  terms?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  proposal?: boolean | Prisma.ProposalDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contract"]>

export type ContractSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  clientId?: boolean
  freelancerId?: boolean
  proposalId?: boolean
  contractAmount?: boolean
  currency?: boolean
  status?: boolean
  startDate?: boolean
  endDate?: boolean
  terms?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  proposal?: boolean | Prisma.ProposalDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contract"]>

export type ContractSelectScalar = {
  id?: boolean
  projectId?: boolean
  clientId?: boolean
  freelancerId?: boolean
  proposalId?: boolean
  contractAmount?: boolean
  currency?: boolean
  status?: boolean
  startDate?: boolean
  endDate?: boolean
  terms?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ContractOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "projectId" | "clientId" | "freelancerId" | "proposalId" | "contractAmount" | "currency" | "status" | "startDate" | "endDate" | "terms" | "createdAt" | "updatedAt", ExtArgs["result"]["contract"]>
export type ContractInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  proposal?: boolean | Prisma.ProposalDefaultArgs<ExtArgs>
}
export type ContractIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  proposal?: boolean | Prisma.ProposalDefaultArgs<ExtArgs>
}
export type ContractIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  client?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  proposal?: boolean | Prisma.ProposalDefaultArgs<ExtArgs>
}

export type $ContractPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Contract"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    client: Prisma.$UserPayload<ExtArgs>
    freelancer: Prisma.$UserPayload<ExtArgs>
    proposal: Prisma.$ProposalPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    projectId: string
    clientId: string
    freelancerId: string
    proposalId: string
    contractAmount: runtime.Decimal
    currency: string
    status: $Enums.ContractStatus
    startDate: Date | null
    endDate: Date | null
    terms: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["contract"]>
  composites: {}
}

export type ContractGetPayload<S extends boolean | null | undefined | ContractDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContractPayload, S>

export type ContractCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContractFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContractCountAggregateInputType | true
  }

export interface ContractDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contract'], meta: { name: 'Contract' } }
  /**
   * Find zero or one Contract that matches the filter.
   * @param {ContractFindUniqueArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContractFindUniqueArgs>(args: Prisma.SelectSubset<T, ContractFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Contract that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContractFindUniqueOrThrowArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContractFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contract that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractFindFirstArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContractFindFirstArgs>(args?: Prisma.SelectSubset<T, ContractFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contract that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractFindFirstOrThrowArgs} args - Arguments to find a Contract
   * @example
   * // Get one Contract
   * const contract = await prisma.contract.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContractFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContractFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Contracts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Contracts
   * const contracts = await prisma.contract.findMany()
   * 
   * // Get first 10 Contracts
   * const contracts = await prisma.contract.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contractWithIdOnly = await prisma.contract.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContractFindManyArgs>(args?: Prisma.SelectSubset<T, ContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Contract.
   * @param {ContractCreateArgs} args - Arguments to create a Contract.
   * @example
   * // Create one Contract
   * const Contract = await prisma.contract.create({
   *   data: {
   *     // ... data to create a Contract
   *   }
   * })
   * 
   */
  create<T extends ContractCreateArgs>(args: Prisma.SelectSubset<T, ContractCreateArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Contracts.
   * @param {ContractCreateManyArgs} args - Arguments to create many Contracts.
   * @example
   * // Create many Contracts
   * const contract = await prisma.contract.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContractCreateManyArgs>(args?: Prisma.SelectSubset<T, ContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Contracts and returns the data saved in the database.
   * @param {ContractCreateManyAndReturnArgs} args - Arguments to create many Contracts.
   * @example
   * // Create many Contracts
   * const contract = await prisma.contract.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Contracts and only return the `id`
   * const contractWithIdOnly = await prisma.contract.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContractCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Contract.
   * @param {ContractDeleteArgs} args - Arguments to delete one Contract.
   * @example
   * // Delete one Contract
   * const Contract = await prisma.contract.delete({
   *   where: {
   *     // ... filter to delete one Contract
   *   }
   * })
   * 
   */
  delete<T extends ContractDeleteArgs>(args: Prisma.SelectSubset<T, ContractDeleteArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Contract.
   * @param {ContractUpdateArgs} args - Arguments to update one Contract.
   * @example
   * // Update one Contract
   * const contract = await prisma.contract.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContractUpdateArgs>(args: Prisma.SelectSubset<T, ContractUpdateArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Contracts.
   * @param {ContractDeleteManyArgs} args - Arguments to filter Contracts to delete.
   * @example
   * // Delete a few Contracts
   * const { count } = await prisma.contract.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContractDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contracts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Contracts
   * const contract = await prisma.contract.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContractUpdateManyArgs>(args: Prisma.SelectSubset<T, ContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contracts and returns the data updated in the database.
   * @param {ContractUpdateManyAndReturnArgs} args - Arguments to update many Contracts.
   * @example
   * // Update many Contracts
   * const contract = await prisma.contract.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Contracts and only return the `id`
   * const contractWithIdOnly = await prisma.contract.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContractUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContractUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Contract.
   * @param {ContractUpsertArgs} args - Arguments to update or create a Contract.
   * @example
   * // Update or create a Contract
   * const contract = await prisma.contract.upsert({
   *   create: {
   *     // ... data to create a Contract
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Contract we want to update
   *   }
   * })
   */
  upsert<T extends ContractUpsertArgs>(args: Prisma.SelectSubset<T, ContractUpsertArgs<ExtArgs>>): Prisma.Prisma__ContractClient<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Contracts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractCountArgs} args - Arguments to filter Contracts to count.
   * @example
   * // Count the number of Contracts
   * const count = await prisma.contract.count({
   *   where: {
   *     // ... the filter for the Contracts we want to count
   *   }
   * })
  **/
  count<T extends ContractCountArgs>(
    args?: Prisma.Subset<T, ContractCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContractCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Contract.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContractAggregateArgs>(args: Prisma.Subset<T, ContractAggregateArgs>): Prisma.PrismaPromise<GetContractAggregateType<T>>

  /**
   * Group by Contract.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContractGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContractGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContractGroupByArgs['orderBy'] }
      : { orderBy?: ContractGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Contract model
 */
readonly fields: ContractFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Contract.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContractClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  client<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  freelancer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  proposal<T extends Prisma.ProposalDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProposalDefaultArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Contract model
 */
export interface ContractFieldRefs {
  readonly id: Prisma.FieldRef<"Contract", 'String'>
  readonly projectId: Prisma.FieldRef<"Contract", 'String'>
  readonly clientId: Prisma.FieldRef<"Contract", 'String'>
  readonly freelancerId: Prisma.FieldRef<"Contract", 'String'>
  readonly proposalId: Prisma.FieldRef<"Contract", 'String'>
  readonly contractAmount: Prisma.FieldRef<"Contract", 'Decimal'>
  readonly currency: Prisma.FieldRef<"Contract", 'String'>
  readonly status: Prisma.FieldRef<"Contract", 'ContractStatus'>
  readonly startDate: Prisma.FieldRef<"Contract", 'DateTime'>
  readonly endDate: Prisma.FieldRef<"Contract", 'DateTime'>
  readonly terms: Prisma.FieldRef<"Contract", 'String'>
  readonly createdAt: Prisma.FieldRef<"Contract", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Contract", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Contract findUnique
 */
export type ContractFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract findUniqueOrThrow
 */
export type ContractFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract findFirst
 */
export type ContractFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contracts.
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contracts.
   */
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Contract findFirstOrThrow
 */
export type ContractFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contract to fetch.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contracts.
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contracts.
   */
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Contract findMany
 */
export type ContractFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter, which Contracts to fetch.
   */
  where?: Prisma.ContractWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contracts to fetch.
   */
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Contracts.
   */
  cursor?: Prisma.ContractWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contracts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contracts.
   */
  skip?: number
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Contract create
 */
export type ContractCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * The data needed to create a Contract.
   */
  data: Prisma.XOR<Prisma.ContractCreateInput, Prisma.ContractUncheckedCreateInput>
}

/**
 * Contract createMany
 */
export type ContractCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Contracts.
   */
  data: Prisma.ContractCreateManyInput | Prisma.ContractCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Contract createManyAndReturn
 */
export type ContractCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * The data used to create many Contracts.
   */
  data: Prisma.ContractCreateManyInput | Prisma.ContractCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Contract update
 */
export type ContractUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * The data needed to update a Contract.
   */
  data: Prisma.XOR<Prisma.ContractUpdateInput, Prisma.ContractUncheckedUpdateInput>
  /**
   * Choose, which Contract to update.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract updateMany
 */
export type ContractUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Contracts.
   */
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyInput>
  /**
   * Filter which Contracts to update
   */
  where?: Prisma.ContractWhereInput
  /**
   * Limit how many Contracts to update.
   */
  limit?: number
}

/**
 * Contract updateManyAndReturn
 */
export type ContractUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * The data used to update Contracts.
   */
  data: Prisma.XOR<Prisma.ContractUpdateManyMutationInput, Prisma.ContractUncheckedUpdateManyInput>
  /**
   * Filter which Contracts to update
   */
  where?: Prisma.ContractWhereInput
  /**
   * Limit how many Contracts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Contract upsert
 */
export type ContractUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * The filter to search for the Contract to update in case it exists.
   */
  where: Prisma.ContractWhereUniqueInput
  /**
   * In case the Contract found by the `where` argument doesn't exist, create a new Contract with this data.
   */
  create: Prisma.XOR<Prisma.ContractCreateInput, Prisma.ContractUncheckedCreateInput>
  /**
   * In case the Contract was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContractUpdateInput, Prisma.ContractUncheckedUpdateInput>
}

/**
 * Contract delete
 */
export type ContractDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  /**
   * Filter which Contract to delete.
   */
  where: Prisma.ContractWhereUniqueInput
}

/**
 * Contract deleteMany
 */
export type ContractDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contracts to delete
   */
  where?: Prisma.ContractWhereInput
  /**
   * Limit how many Contracts to delete.
   */
  limit?: number
}

/**
 * Contract without action
 */
export type ContractDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
}
