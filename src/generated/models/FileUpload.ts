
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `FileUpload` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model FileUpload
 * 
 */
export type FileUploadModel = runtime.Types.Result.DefaultSelection<Prisma.$FileUploadPayload>

export type AggregateFileUpload = {
  _count: FileUploadCountAggregateOutputType | null
  _avg: FileUploadAvgAggregateOutputType | null
  _sum: FileUploadSumAggregateOutputType | null
  _min: FileUploadMinAggregateOutputType | null
  _max: FileUploadMaxAggregateOutputType | null
}

export type FileUploadAvgAggregateOutputType = {
  fileSize: number | null
}

export type FileUploadSumAggregateOutputType = {
  fileSize: number | null
}

export type FileUploadMinAggregateOutputType = {
  id: string | null
  userId: string | null
  projectId: string | null
  filename: string | null
  originalName: string | null
  fileSize: number | null
  mimeType: string | null
  filePath: string | null
  createdAt: Date | null
}

export type FileUploadMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  projectId: string | null
  filename: string | null
  originalName: string | null
  fileSize: number | null
  mimeType: string | null
  filePath: string | null
  createdAt: Date | null
}

export type FileUploadCountAggregateOutputType = {
  id: number
  userId: number
  projectId: number
  filename: number
  originalName: number
  fileSize: number
  mimeType: number
  filePath: number
  createdAt: number
  _all: number
}


export type FileUploadAvgAggregateInputType = {
  fileSize?: true
}

export type FileUploadSumAggregateInputType = {
  fileSize?: true
}

export type FileUploadMinAggregateInputType = {
  id?: true
  userId?: true
  projectId?: true
  filename?: true
  originalName?: true
  fileSize?: true
  mimeType?: true
  filePath?: true
  createdAt?: true
}

export type FileUploadMaxAggregateInputType = {
  id?: true
  userId?: true
  projectId?: true
  filename?: true
  originalName?: true
  fileSize?: true
  mimeType?: true
  filePath?: true
  createdAt?: true
}

export type FileUploadCountAggregateInputType = {
  id?: true
  userId?: true
  projectId?: true
  filename?: true
  originalName?: true
  fileSize?: true
  mimeType?: true
  filePath?: true
  createdAt?: true
  _all?: true
}

export type FileUploadAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FileUpload to aggregate.
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileUploads to fetch.
   */
  orderBy?: Prisma.FileUploadOrderByWithRelationInput | Prisma.FileUploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.FileUploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileUploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileUploads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned FileUploads
  **/
  _count?: true | FileUploadCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: FileUploadAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: FileUploadSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: FileUploadMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: FileUploadMaxAggregateInputType
}

export type GetFileUploadAggregateType<T extends FileUploadAggregateArgs> = {
      [P in keyof T & keyof AggregateFileUpload]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateFileUpload[P]>
    : Prisma.GetScalarType<T[P], AggregateFileUpload[P]>
}




export type FileUploadGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FileUploadWhereInput
  orderBy?: Prisma.FileUploadOrderByWithAggregationInput | Prisma.FileUploadOrderByWithAggregationInput[]
  by: Prisma.FileUploadScalarFieldEnum[] | Prisma.FileUploadScalarFieldEnum
  having?: Prisma.FileUploadScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: FileUploadCountAggregateInputType | true
  _avg?: FileUploadAvgAggregateInputType
  _sum?: FileUploadSumAggregateInputType
  _min?: FileUploadMinAggregateInputType
  _max?: FileUploadMaxAggregateInputType
}

export type FileUploadGroupByOutputType = {
  id: string
  userId: string
  projectId: string | null
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt: Date
  _count: FileUploadCountAggregateOutputType | null
  _avg: FileUploadAvgAggregateOutputType | null
  _sum: FileUploadSumAggregateOutputType | null
  _min: FileUploadMinAggregateOutputType | null
  _max: FileUploadMaxAggregateOutputType | null
}

type GetFileUploadGroupByPayload<T extends FileUploadGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<FileUploadGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof FileUploadGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], FileUploadGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], FileUploadGroupByOutputType[P]>
      }
    >
  >



export type FileUploadWhereInput = {
  AND?: Prisma.FileUploadWhereInput | Prisma.FileUploadWhereInput[]
  OR?: Prisma.FileUploadWhereInput[]
  NOT?: Prisma.FileUploadWhereInput | Prisma.FileUploadWhereInput[]
  id?: Prisma.StringFilter<"FileUpload"> | string
  userId?: Prisma.StringFilter<"FileUpload"> | string
  projectId?: Prisma.StringNullableFilter<"FileUpload"> | string | null
  filename?: Prisma.StringFilter<"FileUpload"> | string
  originalName?: Prisma.StringFilter<"FileUpload"> | string
  fileSize?: Prisma.IntFilter<"FileUpload"> | number
  mimeType?: Prisma.StringFilter<"FileUpload"> | string
  filePath?: Prisma.StringFilter<"FileUpload"> | string
  createdAt?: Prisma.DateTimeFilter<"FileUpload"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  project?: Prisma.XOR<Prisma.ProjectNullableScalarRelationFilter, Prisma.ProjectWhereInput> | null
}

export type FileUploadOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  projectId?: Prisma.SortOrderInput | Prisma.SortOrder
  filename?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  project?: Prisma.ProjectOrderByWithRelationInput
}

export type FileUploadWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.FileUploadWhereInput | Prisma.FileUploadWhereInput[]
  OR?: Prisma.FileUploadWhereInput[]
  NOT?: Prisma.FileUploadWhereInput | Prisma.FileUploadWhereInput[]
  userId?: Prisma.StringFilter<"FileUpload"> | string
  projectId?: Prisma.StringNullableFilter<"FileUpload"> | string | null
  filename?: Prisma.StringFilter<"FileUpload"> | string
  originalName?: Prisma.StringFilter<"FileUpload"> | string
  fileSize?: Prisma.IntFilter<"FileUpload"> | number
  mimeType?: Prisma.StringFilter<"FileUpload"> | string
  filePath?: Prisma.StringFilter<"FileUpload"> | string
  createdAt?: Prisma.DateTimeFilter<"FileUpload"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  project?: Prisma.XOR<Prisma.ProjectNullableScalarRelationFilter, Prisma.ProjectWhereInput> | null
}, "id">

export type FileUploadOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  projectId?: Prisma.SortOrderInput | Prisma.SortOrder
  filename?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.FileUploadCountOrderByAggregateInput
  _avg?: Prisma.FileUploadAvgOrderByAggregateInput
  _max?: Prisma.FileUploadMaxOrderByAggregateInput
  _min?: Prisma.FileUploadMinOrderByAggregateInput
  _sum?: Prisma.FileUploadSumOrderByAggregateInput
}

export type FileUploadScalarWhereWithAggregatesInput = {
  AND?: Prisma.FileUploadScalarWhereWithAggregatesInput | Prisma.FileUploadScalarWhereWithAggregatesInput[]
  OR?: Prisma.FileUploadScalarWhereWithAggregatesInput[]
  NOT?: Prisma.FileUploadScalarWhereWithAggregatesInput | Prisma.FileUploadScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"FileUpload"> | string
  userId?: Prisma.StringWithAggregatesFilter<"FileUpload"> | string
  projectId?: Prisma.StringNullableWithAggregatesFilter<"FileUpload"> | string | null
  filename?: Prisma.StringWithAggregatesFilter<"FileUpload"> | string
  originalName?: Prisma.StringWithAggregatesFilter<"FileUpload"> | string
  fileSize?: Prisma.IntWithAggregatesFilter<"FileUpload"> | number
  mimeType?: Prisma.StringWithAggregatesFilter<"FileUpload"> | string
  filePath?: Prisma.StringWithAggregatesFilter<"FileUpload"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"FileUpload"> | Date | string
}

export type FileUploadCreateInput = {
  id?: string
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFileUploadsInput
  project?: Prisma.ProjectCreateNestedOneWithoutFileUploadsInput
}

export type FileUploadUncheckedCreateInput = {
  id?: string
  userId: string
  projectId?: string | null
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
}

export type FileUploadUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFileUploadsNestedInput
  project?: Prisma.ProjectUpdateOneWithoutFileUploadsNestedInput
}

export type FileUploadUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUploadCreateManyInput = {
  id?: string
  userId: string
  projectId?: string | null
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
}

export type FileUploadUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUploadUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUploadListRelationFilter = {
  every?: Prisma.FileUploadWhereInput
  some?: Prisma.FileUploadWhereInput
  none?: Prisma.FileUploadWhereInput
}

export type FileUploadOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type FileUploadCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FileUploadAvgOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type FileUploadMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FileUploadMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  filename?: Prisma.SortOrder
  originalName?: Prisma.SortOrder
  fileSize?: Prisma.SortOrder
  mimeType?: Prisma.SortOrder
  filePath?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type FileUploadSumOrderByAggregateInput = {
  fileSize?: Prisma.SortOrder
}

export type FileUploadCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutUserInput, Prisma.FileUploadUncheckedCreateWithoutUserInput> | Prisma.FileUploadCreateWithoutUserInput[] | Prisma.FileUploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutUserInput | Prisma.FileUploadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FileUploadCreateManyUserInputEnvelope
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
}

export type FileUploadUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutUserInput, Prisma.FileUploadUncheckedCreateWithoutUserInput> | Prisma.FileUploadCreateWithoutUserInput[] | Prisma.FileUploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutUserInput | Prisma.FileUploadCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.FileUploadCreateManyUserInputEnvelope
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
}

export type FileUploadUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutUserInput, Prisma.FileUploadUncheckedCreateWithoutUserInput> | Prisma.FileUploadCreateWithoutUserInput[] | Prisma.FileUploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutUserInput | Prisma.FileUploadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.FileUploadUpsertWithWhereUniqueWithoutUserInput | Prisma.FileUploadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FileUploadCreateManyUserInputEnvelope
  set?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  disconnect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  delete?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  update?: Prisma.FileUploadUpdateWithWhereUniqueWithoutUserInput | Prisma.FileUploadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.FileUploadUpdateManyWithWhereWithoutUserInput | Prisma.FileUploadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.FileUploadScalarWhereInput | Prisma.FileUploadScalarWhereInput[]
}

export type FileUploadUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutUserInput, Prisma.FileUploadUncheckedCreateWithoutUserInput> | Prisma.FileUploadCreateWithoutUserInput[] | Prisma.FileUploadUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutUserInput | Prisma.FileUploadCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.FileUploadUpsertWithWhereUniqueWithoutUserInput | Prisma.FileUploadUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.FileUploadCreateManyUserInputEnvelope
  set?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  disconnect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  delete?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  update?: Prisma.FileUploadUpdateWithWhereUniqueWithoutUserInput | Prisma.FileUploadUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.FileUploadUpdateManyWithWhereWithoutUserInput | Prisma.FileUploadUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.FileUploadScalarWhereInput | Prisma.FileUploadScalarWhereInput[]
}

export type FileUploadCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutProjectInput, Prisma.FileUploadUncheckedCreateWithoutProjectInput> | Prisma.FileUploadCreateWithoutProjectInput[] | Prisma.FileUploadUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutProjectInput | Prisma.FileUploadCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.FileUploadCreateManyProjectInputEnvelope
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
}

export type FileUploadUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutProjectInput, Prisma.FileUploadUncheckedCreateWithoutProjectInput> | Prisma.FileUploadCreateWithoutProjectInput[] | Prisma.FileUploadUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutProjectInput | Prisma.FileUploadCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.FileUploadCreateManyProjectInputEnvelope
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
}

export type FileUploadUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutProjectInput, Prisma.FileUploadUncheckedCreateWithoutProjectInput> | Prisma.FileUploadCreateWithoutProjectInput[] | Prisma.FileUploadUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutProjectInput | Prisma.FileUploadCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.FileUploadUpsertWithWhereUniqueWithoutProjectInput | Prisma.FileUploadUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.FileUploadCreateManyProjectInputEnvelope
  set?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  disconnect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  delete?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  update?: Prisma.FileUploadUpdateWithWhereUniqueWithoutProjectInput | Prisma.FileUploadUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.FileUploadUpdateManyWithWhereWithoutProjectInput | Prisma.FileUploadUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.FileUploadScalarWhereInput | Prisma.FileUploadScalarWhereInput[]
}

export type FileUploadUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.FileUploadCreateWithoutProjectInput, Prisma.FileUploadUncheckedCreateWithoutProjectInput> | Prisma.FileUploadCreateWithoutProjectInput[] | Prisma.FileUploadUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.FileUploadCreateOrConnectWithoutProjectInput | Prisma.FileUploadCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.FileUploadUpsertWithWhereUniqueWithoutProjectInput | Prisma.FileUploadUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.FileUploadCreateManyProjectInputEnvelope
  set?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  disconnect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  delete?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  connect?: Prisma.FileUploadWhereUniqueInput | Prisma.FileUploadWhereUniqueInput[]
  update?: Prisma.FileUploadUpdateWithWhereUniqueWithoutProjectInput | Prisma.FileUploadUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.FileUploadUpdateManyWithWhereWithoutProjectInput | Prisma.FileUploadUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.FileUploadScalarWhereInput | Prisma.FileUploadScalarWhereInput[]
}

export type FileUploadCreateWithoutUserInput = {
  id?: string
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
  project?: Prisma.ProjectCreateNestedOneWithoutFileUploadsInput
}

export type FileUploadUncheckedCreateWithoutUserInput = {
  id?: string
  projectId?: string | null
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
}

export type FileUploadCreateOrConnectWithoutUserInput = {
  where: Prisma.FileUploadWhereUniqueInput
  create: Prisma.XOR<Prisma.FileUploadCreateWithoutUserInput, Prisma.FileUploadUncheckedCreateWithoutUserInput>
}

export type FileUploadCreateManyUserInputEnvelope = {
  data: Prisma.FileUploadCreateManyUserInput | Prisma.FileUploadCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type FileUploadUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.FileUploadWhereUniqueInput
  update: Prisma.XOR<Prisma.FileUploadUpdateWithoutUserInput, Prisma.FileUploadUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.FileUploadCreateWithoutUserInput, Prisma.FileUploadUncheckedCreateWithoutUserInput>
}

export type FileUploadUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.FileUploadWhereUniqueInput
  data: Prisma.XOR<Prisma.FileUploadUpdateWithoutUserInput, Prisma.FileUploadUncheckedUpdateWithoutUserInput>
}

export type FileUploadUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.FileUploadScalarWhereInput
  data: Prisma.XOR<Prisma.FileUploadUpdateManyMutationInput, Prisma.FileUploadUncheckedUpdateManyWithoutUserInput>
}

export type FileUploadScalarWhereInput = {
  AND?: Prisma.FileUploadScalarWhereInput | Prisma.FileUploadScalarWhereInput[]
  OR?: Prisma.FileUploadScalarWhereInput[]
  NOT?: Prisma.FileUploadScalarWhereInput | Prisma.FileUploadScalarWhereInput[]
  id?: Prisma.StringFilter<"FileUpload"> | string
  userId?: Prisma.StringFilter<"FileUpload"> | string
  projectId?: Prisma.StringNullableFilter<"FileUpload"> | string | null
  filename?: Prisma.StringFilter<"FileUpload"> | string
  originalName?: Prisma.StringFilter<"FileUpload"> | string
  fileSize?: Prisma.IntFilter<"FileUpload"> | number
  mimeType?: Prisma.StringFilter<"FileUpload"> | string
  filePath?: Prisma.StringFilter<"FileUpload"> | string
  createdAt?: Prisma.DateTimeFilter<"FileUpload"> | Date | string
}

export type FileUploadCreateWithoutProjectInput = {
  id?: string
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutFileUploadsInput
}

export type FileUploadUncheckedCreateWithoutProjectInput = {
  id?: string
  userId: string
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
}

export type FileUploadCreateOrConnectWithoutProjectInput = {
  where: Prisma.FileUploadWhereUniqueInput
  create: Prisma.XOR<Prisma.FileUploadCreateWithoutProjectInput, Prisma.FileUploadUncheckedCreateWithoutProjectInput>
}

export type FileUploadCreateManyProjectInputEnvelope = {
  data: Prisma.FileUploadCreateManyProjectInput | Prisma.FileUploadCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type FileUploadUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.FileUploadWhereUniqueInput
  update: Prisma.XOR<Prisma.FileUploadUpdateWithoutProjectInput, Prisma.FileUploadUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.FileUploadCreateWithoutProjectInput, Prisma.FileUploadUncheckedCreateWithoutProjectInput>
}

export type FileUploadUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.FileUploadWhereUniqueInput
  data: Prisma.XOR<Prisma.FileUploadUpdateWithoutProjectInput, Prisma.FileUploadUncheckedUpdateWithoutProjectInput>
}

export type FileUploadUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.FileUploadScalarWhereInput
  data: Prisma.XOR<Prisma.FileUploadUpdateManyMutationInput, Prisma.FileUploadUncheckedUpdateManyWithoutProjectInput>
}

export type FileUploadCreateManyUserInput = {
  id?: string
  projectId?: string | null
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
}

export type FileUploadUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneWithoutFileUploadsNestedInput
}

export type FileUploadUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUploadUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUploadCreateManyProjectInput = {
  id?: string
  userId: string
  filename: string
  originalName: string
  fileSize: number
  mimeType: string
  filePath: string
  createdAt?: Date | string
}

export type FileUploadUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutFileUploadsNestedInput
}

export type FileUploadUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type FileUploadUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  filename?: Prisma.StringFieldUpdateOperationsInput | string
  originalName?: Prisma.StringFieldUpdateOperationsInput | string
  fileSize?: Prisma.IntFieldUpdateOperationsInput | number
  mimeType?: Prisma.StringFieldUpdateOperationsInput | string
  filePath?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type FileUploadSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  projectId?: boolean
  filename?: boolean
  originalName?: boolean
  fileSize?: boolean
  mimeType?: boolean
  filePath?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  project?: boolean | Prisma.FileUpload$projectArgs<ExtArgs>
}, ExtArgs["result"]["fileUpload"]>

export type FileUploadSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  projectId?: boolean
  filename?: boolean
  originalName?: boolean
  fileSize?: boolean
  mimeType?: boolean
  filePath?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  project?: boolean | Prisma.FileUpload$projectArgs<ExtArgs>
}, ExtArgs["result"]["fileUpload"]>

export type FileUploadSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  projectId?: boolean
  filename?: boolean
  originalName?: boolean
  fileSize?: boolean
  mimeType?: boolean
  filePath?: boolean
  createdAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  project?: boolean | Prisma.FileUpload$projectArgs<ExtArgs>
}, ExtArgs["result"]["fileUpload"]>

export type FileUploadSelectScalar = {
  id?: boolean
  userId?: boolean
  projectId?: boolean
  filename?: boolean
  originalName?: boolean
  fileSize?: boolean
  mimeType?: boolean
  filePath?: boolean
  createdAt?: boolean
}

export type FileUploadOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "projectId" | "filename" | "originalName" | "fileSize" | "mimeType" | "filePath" | "createdAt", ExtArgs["result"]["fileUpload"]>
export type FileUploadInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  project?: boolean | Prisma.FileUpload$projectArgs<ExtArgs>
}
export type FileUploadIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  project?: boolean | Prisma.FileUpload$projectArgs<ExtArgs>
}
export type FileUploadIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  project?: boolean | Prisma.FileUpload$projectArgs<ExtArgs>
}

export type $FileUploadPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "FileUpload"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    project: Prisma.$ProjectPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    projectId: string | null
    filename: string
    originalName: string
    fileSize: number
    mimeType: string
    filePath: string
    createdAt: Date
  }, ExtArgs["result"]["fileUpload"]>
  composites: {}
}

export type FileUploadGetPayload<S extends boolean | null | undefined | FileUploadDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$FileUploadPayload, S>

export type FileUploadCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<FileUploadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: FileUploadCountAggregateInputType | true
  }

export interface FileUploadDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileUpload'], meta: { name: 'FileUpload' } }
  /**
   * Find zero or one FileUpload that matches the filter.
   * @param {FileUploadFindUniqueArgs} args - Arguments to find a FileUpload
   * @example
   * // Get one FileUpload
   * const fileUpload = await prisma.fileUpload.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends FileUploadFindUniqueArgs>(args: Prisma.SelectSubset<T, FileUploadFindUniqueArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one FileUpload that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {FileUploadFindUniqueOrThrowArgs} args - Arguments to find a FileUpload
   * @example
   * // Get one FileUpload
   * const fileUpload = await prisma.fileUpload.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends FileUploadFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, FileUploadFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FileUpload that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadFindFirstArgs} args - Arguments to find a FileUpload
   * @example
   * // Get one FileUpload
   * const fileUpload = await prisma.fileUpload.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends FileUploadFindFirstArgs>(args?: Prisma.SelectSubset<T, FileUploadFindFirstArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first FileUpload that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadFindFirstOrThrowArgs} args - Arguments to find a FileUpload
   * @example
   * // Get one FileUpload
   * const fileUpload = await prisma.fileUpload.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends FileUploadFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, FileUploadFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more FileUploads that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all FileUploads
   * const fileUploads = await prisma.fileUpload.findMany()
   * 
   * // Get first 10 FileUploads
   * const fileUploads = await prisma.fileUpload.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const fileUploadWithIdOnly = await prisma.fileUpload.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends FileUploadFindManyArgs>(args?: Prisma.SelectSubset<T, FileUploadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a FileUpload.
   * @param {FileUploadCreateArgs} args - Arguments to create a FileUpload.
   * @example
   * // Create one FileUpload
   * const FileUpload = await prisma.fileUpload.create({
   *   data: {
   *     // ... data to create a FileUpload
   *   }
   * })
   * 
   */
  create<T extends FileUploadCreateArgs>(args: Prisma.SelectSubset<T, FileUploadCreateArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many FileUploads.
   * @param {FileUploadCreateManyArgs} args - Arguments to create many FileUploads.
   * @example
   * // Create many FileUploads
   * const fileUpload = await prisma.fileUpload.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends FileUploadCreateManyArgs>(args?: Prisma.SelectSubset<T, FileUploadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many FileUploads and returns the data saved in the database.
   * @param {FileUploadCreateManyAndReturnArgs} args - Arguments to create many FileUploads.
   * @example
   * // Create many FileUploads
   * const fileUpload = await prisma.fileUpload.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many FileUploads and only return the `id`
   * const fileUploadWithIdOnly = await prisma.fileUpload.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends FileUploadCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, FileUploadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a FileUpload.
   * @param {FileUploadDeleteArgs} args - Arguments to delete one FileUpload.
   * @example
   * // Delete one FileUpload
   * const FileUpload = await prisma.fileUpload.delete({
   *   where: {
   *     // ... filter to delete one FileUpload
   *   }
   * })
   * 
   */
  delete<T extends FileUploadDeleteArgs>(args: Prisma.SelectSubset<T, FileUploadDeleteArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one FileUpload.
   * @param {FileUploadUpdateArgs} args - Arguments to update one FileUpload.
   * @example
   * // Update one FileUpload
   * const fileUpload = await prisma.fileUpload.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends FileUploadUpdateArgs>(args: Prisma.SelectSubset<T, FileUploadUpdateArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more FileUploads.
   * @param {FileUploadDeleteManyArgs} args - Arguments to filter FileUploads to delete.
   * @example
   * // Delete a few FileUploads
   * const { count } = await prisma.fileUpload.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends FileUploadDeleteManyArgs>(args?: Prisma.SelectSubset<T, FileUploadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FileUploads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many FileUploads
   * const fileUpload = await prisma.fileUpload.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends FileUploadUpdateManyArgs>(args: Prisma.SelectSubset<T, FileUploadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more FileUploads and returns the data updated in the database.
   * @param {FileUploadUpdateManyAndReturnArgs} args - Arguments to update many FileUploads.
   * @example
   * // Update many FileUploads
   * const fileUpload = await prisma.fileUpload.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more FileUploads and only return the `id`
   * const fileUploadWithIdOnly = await prisma.fileUpload.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends FileUploadUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, FileUploadUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one FileUpload.
   * @param {FileUploadUpsertArgs} args - Arguments to update or create a FileUpload.
   * @example
   * // Update or create a FileUpload
   * const fileUpload = await prisma.fileUpload.upsert({
   *   create: {
   *     // ... data to create a FileUpload
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the FileUpload we want to update
   *   }
   * })
   */
  upsert<T extends FileUploadUpsertArgs>(args: Prisma.SelectSubset<T, FileUploadUpsertArgs<ExtArgs>>): Prisma.Prisma__FileUploadClient<runtime.Types.Result.GetResult<Prisma.$FileUploadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of FileUploads.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadCountArgs} args - Arguments to filter FileUploads to count.
   * @example
   * // Count the number of FileUploads
   * const count = await prisma.fileUpload.count({
   *   where: {
   *     // ... the filter for the FileUploads we want to count
   *   }
   * })
  **/
  count<T extends FileUploadCountArgs>(
    args?: Prisma.Subset<T, FileUploadCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], FileUploadCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a FileUpload.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends FileUploadAggregateArgs>(args: Prisma.Subset<T, FileUploadAggregateArgs>): Prisma.PrismaPromise<GetFileUploadAggregateType<T>>

  /**
   * Group by FileUpload.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {FileUploadGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends FileUploadGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: FileUploadGroupByArgs['orderBy'] }
      : { orderBy?: FileUploadGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, FileUploadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileUploadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the FileUpload model
 */
readonly fields: FileUploadFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for FileUpload.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__FileUploadClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  project<T extends Prisma.FileUpload$projectArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.FileUpload$projectArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the FileUpload model
 */
export interface FileUploadFieldRefs {
  readonly id: Prisma.FieldRef<"FileUpload", 'String'>
  readonly userId: Prisma.FieldRef<"FileUpload", 'String'>
  readonly projectId: Prisma.FieldRef<"FileUpload", 'String'>
  readonly filename: Prisma.FieldRef<"FileUpload", 'String'>
  readonly originalName: Prisma.FieldRef<"FileUpload", 'String'>
  readonly fileSize: Prisma.FieldRef<"FileUpload", 'Int'>
  readonly mimeType: Prisma.FieldRef<"FileUpload", 'String'>
  readonly filePath: Prisma.FieldRef<"FileUpload", 'String'>
  readonly createdAt: Prisma.FieldRef<"FileUpload", 'DateTime'>
}
    

// Custom InputTypes
/**
 * FileUpload findUnique
 */
export type FileUploadFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * Filter, which FileUpload to fetch.
   */
  where: Prisma.FileUploadWhereUniqueInput
}

/**
 * FileUpload findUniqueOrThrow
 */
export type FileUploadFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * Filter, which FileUpload to fetch.
   */
  where: Prisma.FileUploadWhereUniqueInput
}

/**
 * FileUpload findFirst
 */
export type FileUploadFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * Filter, which FileUpload to fetch.
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileUploads to fetch.
   */
  orderBy?: Prisma.FileUploadOrderByWithRelationInput | Prisma.FileUploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FileUploads.
   */
  cursor?: Prisma.FileUploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileUploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileUploads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FileUploads.
   */
  distinct?: Prisma.FileUploadScalarFieldEnum | Prisma.FileUploadScalarFieldEnum[]
}

/**
 * FileUpload findFirstOrThrow
 */
export type FileUploadFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * Filter, which FileUpload to fetch.
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileUploads to fetch.
   */
  orderBy?: Prisma.FileUploadOrderByWithRelationInput | Prisma.FileUploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for FileUploads.
   */
  cursor?: Prisma.FileUploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileUploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileUploads.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of FileUploads.
   */
  distinct?: Prisma.FileUploadScalarFieldEnum | Prisma.FileUploadScalarFieldEnum[]
}

/**
 * FileUpload findMany
 */
export type FileUploadFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * Filter, which FileUploads to fetch.
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of FileUploads to fetch.
   */
  orderBy?: Prisma.FileUploadOrderByWithRelationInput | Prisma.FileUploadOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing FileUploads.
   */
  cursor?: Prisma.FileUploadWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` FileUploads from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` FileUploads.
   */
  skip?: number
  distinct?: Prisma.FileUploadScalarFieldEnum | Prisma.FileUploadScalarFieldEnum[]
}

/**
 * FileUpload create
 */
export type FileUploadCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * The data needed to create a FileUpload.
   */
  data: Prisma.XOR<Prisma.FileUploadCreateInput, Prisma.FileUploadUncheckedCreateInput>
}

/**
 * FileUpload createMany
 */
export type FileUploadCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many FileUploads.
   */
  data: Prisma.FileUploadCreateManyInput | Prisma.FileUploadCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * FileUpload createManyAndReturn
 */
export type FileUploadCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * The data used to create many FileUploads.
   */
  data: Prisma.FileUploadCreateManyInput | Prisma.FileUploadCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * FileUpload update
 */
export type FileUploadUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * The data needed to update a FileUpload.
   */
  data: Prisma.XOR<Prisma.FileUploadUpdateInput, Prisma.FileUploadUncheckedUpdateInput>
  /**
   * Choose, which FileUpload to update.
   */
  where: Prisma.FileUploadWhereUniqueInput
}

/**
 * FileUpload updateMany
 */
export type FileUploadUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update FileUploads.
   */
  data: Prisma.XOR<Prisma.FileUploadUpdateManyMutationInput, Prisma.FileUploadUncheckedUpdateManyInput>
  /**
   * Filter which FileUploads to update
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * Limit how many FileUploads to update.
   */
  limit?: number
}

/**
 * FileUpload updateManyAndReturn
 */
export type FileUploadUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * The data used to update FileUploads.
   */
  data: Prisma.XOR<Prisma.FileUploadUpdateManyMutationInput, Prisma.FileUploadUncheckedUpdateManyInput>
  /**
   * Filter which FileUploads to update
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * Limit how many FileUploads to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * FileUpload upsert
 */
export type FileUploadUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * The filter to search for the FileUpload to update in case it exists.
   */
  where: Prisma.FileUploadWhereUniqueInput
  /**
   * In case the FileUpload found by the `where` argument doesn't exist, create a new FileUpload with this data.
   */
  create: Prisma.XOR<Prisma.FileUploadCreateInput, Prisma.FileUploadUncheckedCreateInput>
  /**
   * In case the FileUpload was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.FileUploadUpdateInput, Prisma.FileUploadUncheckedUpdateInput>
}

/**
 * FileUpload delete
 */
export type FileUploadDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
  /**
   * Filter which FileUpload to delete.
   */
  where: Prisma.FileUploadWhereUniqueInput
}

/**
 * FileUpload deleteMany
 */
export type FileUploadDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which FileUploads to delete
   */
  where?: Prisma.FileUploadWhereInput
  /**
   * Limit how many FileUploads to delete.
   */
  limit?: number
}

/**
 * FileUpload.project
 */
export type FileUpload$projectArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Project
   */
  select?: Prisma.ProjectSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Project
   */
  omit?: Prisma.ProjectOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectInclude<ExtArgs> | null
  where?: Prisma.ProjectWhereInput
}

/**
 * FileUpload without action
 */
export type FileUploadDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the FileUpload
   */
  select?: Prisma.FileUploadSelect<ExtArgs> | null
  /**
   * Omit specific fields from the FileUpload
   */
  omit?: Prisma.FileUploadOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FileUploadInclude<ExtArgs> | null
}
