
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `TechStack` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TechStack
 * 
 */
export type TechStackModel = runtime.Types.Result.DefaultSelection<Prisma.$TechStackPayload>

export type AggregateTechStack = {
  _count: TechStackCountAggregateOutputType | null
  _min: TechStackMinAggregateOutputType | null
  _max: TechStackMaxAggregateOutputType | null
}

export type TechStackMinAggregateOutputType = {
  id: string | null
  name: string | null
  category: string | null
  description: string | null
  createdAt: Date | null
}

export type TechStackMaxAggregateOutputType = {
  id: string | null
  name: string | null
  category: string | null
  description: string | null
  createdAt: Date | null
}

export type TechStackCountAggregateOutputType = {
  id: number
  name: number
  category: number
  description: number
  createdAt: number
  _all: number
}


export type TechStackMinAggregateInputType = {
  id?: true
  name?: true
  category?: true
  description?: true
  createdAt?: true
}

export type TechStackMaxAggregateInputType = {
  id?: true
  name?: true
  category?: true
  description?: true
  createdAt?: true
}

export type TechStackCountAggregateInputType = {
  id?: true
  name?: true
  category?: true
  description?: true
  createdAt?: true
  _all?: true
}

export type TechStackAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechStack to aggregate.
   */
  where?: Prisma.TechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStacks to fetch.
   */
  orderBy?: Prisma.TechStackOrderByWithRelationInput | Prisma.TechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStacks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TechStacks
  **/
  _count?: true | TechStackCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechStackMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechStackMaxAggregateInputType
}

export type GetTechStackAggregateType<T extends TechStackAggregateArgs> = {
      [P in keyof T & keyof AggregateTechStack]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTechStack[P]>
    : Prisma.GetScalarType<T[P], AggregateTechStack[P]>
}




export type TechStackGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TechStackWhereInput
  orderBy?: Prisma.TechStackOrderByWithAggregationInput | Prisma.TechStackOrderByWithAggregationInput[]
  by: Prisma.TechStackScalarFieldEnum[] | Prisma.TechStackScalarFieldEnum
  having?: Prisma.TechStackScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechStackCountAggregateInputType | true
  _min?: TechStackMinAggregateInputType
  _max?: TechStackMaxAggregateInputType
}

export type TechStackGroupByOutputType = {
  id: string
  name: string
  category: string | null
  description: string | null
  createdAt: Date
  _count: TechStackCountAggregateOutputType | null
  _min: TechStackMinAggregateOutputType | null
  _max: TechStackMaxAggregateOutputType | null
}

type GetTechStackGroupByPayload<T extends TechStackGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechStackGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechStackGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechStackGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechStackGroupByOutputType[P]>
      }
    >
  >



export type TechStackWhereInput = {
  AND?: Prisma.TechStackWhereInput | Prisma.TechStackWhereInput[]
  OR?: Prisma.TechStackWhereInput[]
  NOT?: Prisma.TechStackWhereInput | Prisma.TechStackWhereInput[]
  id?: Prisma.StringFilter<"TechStack"> | string
  name?: Prisma.StringFilter<"TechStack"> | string
  category?: Prisma.StringNullableFilter<"TechStack"> | string | null
  description?: Prisma.StringNullableFilter<"TechStack"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TechStack"> | Date | string
}

export type TechStackOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TechStackWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  name?: string
  AND?: Prisma.TechStackWhereInput | Prisma.TechStackWhereInput[]
  OR?: Prisma.TechStackWhereInput[]
  NOT?: Prisma.TechStackWhereInput | Prisma.TechStackWhereInput[]
  category?: Prisma.StringNullableFilter<"TechStack"> | string | null
  description?: Prisma.StringNullableFilter<"TechStack"> | string | null
  createdAt?: Prisma.DateTimeFilter<"TechStack"> | Date | string
}, "id" | "name">

export type TechStackOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.TechStackCountOrderByAggregateInput
  _max?: Prisma.TechStackMaxOrderByAggregateInput
  _min?: Prisma.TechStackMinOrderByAggregateInput
}

export type TechStackScalarWhereWithAggregatesInput = {
  AND?: Prisma.TechStackScalarWhereWithAggregatesInput | Prisma.TechStackScalarWhereWithAggregatesInput[]
  OR?: Prisma.TechStackScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TechStackScalarWhereWithAggregatesInput | Prisma.TechStackScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TechStack"> | string
  name?: Prisma.StringWithAggregatesFilter<"TechStack"> | string
  category?: Prisma.StringNullableWithAggregatesFilter<"TechStack"> | string | null
  description?: Prisma.StringNullableWithAggregatesFilter<"TechStack"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TechStack"> | Date | string
}

export type TechStackCreateInput = {
  id?: string
  name: string
  category?: string | null
  description?: string | null
  createdAt?: Date | string
}

export type TechStackUncheckedCreateInput = {
  id?: string
  name: string
  category?: string | null
  description?: string | null
  createdAt?: Date | string
}

export type TechStackUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackCreateManyInput = {
  id?: string
  name: string
  category?: string | null
  description?: string | null
  createdAt?: Date | string
}

export type TechStackUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  category?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TechStackCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TechStackMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type TechStackMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  category?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}



export type TechStackSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["techStack"]>

export type TechStackSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["techStack"]>

export type TechStackSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["techStack"]>

export type TechStackSelectScalar = {
  id?: boolean
  name?: boolean
  category?: boolean
  description?: boolean
  createdAt?: boolean
}

export type TechStackOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "category" | "description" | "createdAt", ExtArgs["result"]["techStack"]>

export type $TechStackPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TechStack"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    category: string | null
    description: string | null
    createdAt: Date
  }, ExtArgs["result"]["techStack"]>
  composites: {}
}

export type TechStackGetPayload<S extends boolean | null | undefined | TechStackDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TechStackPayload, S>

export type TechStackCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TechStackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechStackCountAggregateInputType | true
  }

export interface TechStackDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TechStack'], meta: { name: 'TechStack' } }
  /**
   * Find zero or one TechStack that matches the filter.
   * @param {TechStackFindUniqueArgs} args - Arguments to find a TechStack
   * @example
   * // Get one TechStack
   * const techStack = await prisma.techStack.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TechStackFindUniqueArgs>(args: Prisma.SelectSubset<T, TechStackFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TechStack that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TechStackFindUniqueOrThrowArgs} args - Arguments to find a TechStack
   * @example
   * // Get one TechStack
   * const techStack = await prisma.techStack.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TechStackFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TechStackFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechStack that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackFindFirstArgs} args - Arguments to find a TechStack
   * @example
   * // Get one TechStack
   * const techStack = await prisma.techStack.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TechStackFindFirstArgs>(args?: Prisma.SelectSubset<T, TechStackFindFirstArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TechStack that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackFindFirstOrThrowArgs} args - Arguments to find a TechStack
   * @example
   * // Get one TechStack
   * const techStack = await prisma.techStack.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TechStackFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TechStackFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TechStacks that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TechStacks
   * const techStacks = await prisma.techStack.findMany()
   * 
   * // Get first 10 TechStacks
   * const techStacks = await prisma.techStack.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const techStackWithIdOnly = await prisma.techStack.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TechStackFindManyArgs>(args?: Prisma.SelectSubset<T, TechStackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TechStack.
   * @param {TechStackCreateArgs} args - Arguments to create a TechStack.
   * @example
   * // Create one TechStack
   * const TechStack = await prisma.techStack.create({
   *   data: {
   *     // ... data to create a TechStack
   *   }
   * })
   * 
   */
  create<T extends TechStackCreateArgs>(args: Prisma.SelectSubset<T, TechStackCreateArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TechStacks.
   * @param {TechStackCreateManyArgs} args - Arguments to create many TechStacks.
   * @example
   * // Create many TechStacks
   * const techStack = await prisma.techStack.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TechStackCreateManyArgs>(args?: Prisma.SelectSubset<T, TechStackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TechStacks and returns the data saved in the database.
   * @param {TechStackCreateManyAndReturnArgs} args - Arguments to create many TechStacks.
   * @example
   * // Create many TechStacks
   * const techStack = await prisma.techStack.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TechStacks and only return the `id`
   * const techStackWithIdOnly = await prisma.techStack.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TechStackCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TechStackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TechStack.
   * @param {TechStackDeleteArgs} args - Arguments to delete one TechStack.
   * @example
   * // Delete one TechStack
   * const TechStack = await prisma.techStack.delete({
   *   where: {
   *     // ... filter to delete one TechStack
   *   }
   * })
   * 
   */
  delete<T extends TechStackDeleteArgs>(args: Prisma.SelectSubset<T, TechStackDeleteArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TechStack.
   * @param {TechStackUpdateArgs} args - Arguments to update one TechStack.
   * @example
   * // Update one TechStack
   * const techStack = await prisma.techStack.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TechStackUpdateArgs>(args: Prisma.SelectSubset<T, TechStackUpdateArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TechStacks.
   * @param {TechStackDeleteManyArgs} args - Arguments to filter TechStacks to delete.
   * @example
   * // Delete a few TechStacks
   * const { count } = await prisma.techStack.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TechStackDeleteManyArgs>(args?: Prisma.SelectSubset<T, TechStackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechStacks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TechStacks
   * const techStack = await prisma.techStack.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TechStackUpdateManyArgs>(args: Prisma.SelectSubset<T, TechStackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TechStacks and returns the data updated in the database.
   * @param {TechStackUpdateManyAndReturnArgs} args - Arguments to update many TechStacks.
   * @example
   * // Update many TechStacks
   * const techStack = await prisma.techStack.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TechStacks and only return the `id`
   * const techStackWithIdOnly = await prisma.techStack.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TechStackUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TechStackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TechStack.
   * @param {TechStackUpsertArgs} args - Arguments to update or create a TechStack.
   * @example
   * // Update or create a TechStack
   * const techStack = await prisma.techStack.upsert({
   *   create: {
   *     // ... data to create a TechStack
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TechStack we want to update
   *   }
   * })
   */
  upsert<T extends TechStackUpsertArgs>(args: Prisma.SelectSubset<T, TechStackUpsertArgs<ExtArgs>>): Prisma.Prisma__TechStackClient<runtime.Types.Result.GetResult<Prisma.$TechStackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TechStacks.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackCountArgs} args - Arguments to filter TechStacks to count.
   * @example
   * // Count the number of TechStacks
   * const count = await prisma.techStack.count({
   *   where: {
   *     // ... the filter for the TechStacks we want to count
   *   }
   * })
  **/
  count<T extends TechStackCountArgs>(
    args?: Prisma.Subset<T, TechStackCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechStackCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TechStack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechStackAggregateArgs>(args: Prisma.Subset<T, TechStackAggregateArgs>): Prisma.PrismaPromise<GetTechStackAggregateType<T>>

  /**
   * Group by TechStack.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechStackGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TechStackGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TechStackGroupByArgs['orderBy'] }
      : { orderBy?: TechStackGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TechStackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechStackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TechStack model
 */
readonly fields: TechStackFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TechStack.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TechStackClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TechStack model
 */
export interface TechStackFieldRefs {
  readonly id: Prisma.FieldRef<"TechStack", 'String'>
  readonly name: Prisma.FieldRef<"TechStack", 'String'>
  readonly category: Prisma.FieldRef<"TechStack", 'String'>
  readonly description: Prisma.FieldRef<"TechStack", 'String'>
  readonly createdAt: Prisma.FieldRef<"TechStack", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TechStack findUnique
 */
export type TechStackFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * Filter, which TechStack to fetch.
   */
  where: Prisma.TechStackWhereUniqueInput
}

/**
 * TechStack findUniqueOrThrow
 */
export type TechStackFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * Filter, which TechStack to fetch.
   */
  where: Prisma.TechStackWhereUniqueInput
}

/**
 * TechStack findFirst
 */
export type TechStackFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * Filter, which TechStack to fetch.
   */
  where?: Prisma.TechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStacks to fetch.
   */
  orderBy?: Prisma.TechStackOrderByWithRelationInput | Prisma.TechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechStacks.
   */
  cursor?: Prisma.TechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStacks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechStacks.
   */
  distinct?: Prisma.TechStackScalarFieldEnum | Prisma.TechStackScalarFieldEnum[]
}

/**
 * TechStack findFirstOrThrow
 */
export type TechStackFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * Filter, which TechStack to fetch.
   */
  where?: Prisma.TechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStacks to fetch.
   */
  orderBy?: Prisma.TechStackOrderByWithRelationInput | Prisma.TechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TechStacks.
   */
  cursor?: Prisma.TechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStacks.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TechStacks.
   */
  distinct?: Prisma.TechStackScalarFieldEnum | Prisma.TechStackScalarFieldEnum[]
}

/**
 * TechStack findMany
 */
export type TechStackFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * Filter, which TechStacks to fetch.
   */
  where?: Prisma.TechStackWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TechStacks to fetch.
   */
  orderBy?: Prisma.TechStackOrderByWithRelationInput | Prisma.TechStackOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TechStacks.
   */
  cursor?: Prisma.TechStackWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TechStacks from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TechStacks.
   */
  skip?: number
  distinct?: Prisma.TechStackScalarFieldEnum | Prisma.TechStackScalarFieldEnum[]
}

/**
 * TechStack create
 */
export type TechStackCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * The data needed to create a TechStack.
   */
  data: Prisma.XOR<Prisma.TechStackCreateInput, Prisma.TechStackUncheckedCreateInput>
}

/**
 * TechStack createMany
 */
export type TechStackCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TechStacks.
   */
  data: Prisma.TechStackCreateManyInput | Prisma.TechStackCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TechStack createManyAndReturn
 */
export type TechStackCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * The data used to create many TechStacks.
   */
  data: Prisma.TechStackCreateManyInput | Prisma.TechStackCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TechStack update
 */
export type TechStackUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * The data needed to update a TechStack.
   */
  data: Prisma.XOR<Prisma.TechStackUpdateInput, Prisma.TechStackUncheckedUpdateInput>
  /**
   * Choose, which TechStack to update.
   */
  where: Prisma.TechStackWhereUniqueInput
}

/**
 * TechStack updateMany
 */
export type TechStackUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TechStacks.
   */
  data: Prisma.XOR<Prisma.TechStackUpdateManyMutationInput, Prisma.TechStackUncheckedUpdateManyInput>
  /**
   * Filter which TechStacks to update
   */
  where?: Prisma.TechStackWhereInput
  /**
   * Limit how many TechStacks to update.
   */
  limit?: number
}

/**
 * TechStack updateManyAndReturn
 */
export type TechStackUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * The data used to update TechStacks.
   */
  data: Prisma.XOR<Prisma.TechStackUpdateManyMutationInput, Prisma.TechStackUncheckedUpdateManyInput>
  /**
   * Filter which TechStacks to update
   */
  where?: Prisma.TechStackWhereInput
  /**
   * Limit how many TechStacks to update.
   */
  limit?: number
}

/**
 * TechStack upsert
 */
export type TechStackUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * The filter to search for the TechStack to update in case it exists.
   */
  where: Prisma.TechStackWhereUniqueInput
  /**
   * In case the TechStack found by the `where` argument doesn't exist, create a new TechStack with this data.
   */
  create: Prisma.XOR<Prisma.TechStackCreateInput, Prisma.TechStackUncheckedCreateInput>
  /**
   * In case the TechStack was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TechStackUpdateInput, Prisma.TechStackUncheckedUpdateInput>
}

/**
 * TechStack delete
 */
export type TechStackDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
  /**
   * Filter which TechStack to delete.
   */
  where: Prisma.TechStackWhereUniqueInput
}

/**
 * TechStack deleteMany
 */
export type TechStackDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TechStacks to delete
   */
  where?: Prisma.TechStackWhereInput
  /**
   * Limit how many TechStacks to delete.
   */
  limit?: number
}

/**
 * TechStack without action
 */
export type TechStackDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechStack
   */
  select?: Prisma.TechStackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TechStack
   */
  omit?: Prisma.TechStackOmit<ExtArgs> | null
}
