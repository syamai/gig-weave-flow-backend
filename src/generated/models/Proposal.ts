
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Proposal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model Proposal
 * 
 */
export type ProposalModel = runtime.Types.Result.DefaultSelection<Prisma.$ProposalPayload>

export type AggregateProposal = {
  _count: ProposalCountAggregateOutputType | null
  _avg: ProposalAvgAggregateOutputType | null
  _sum: ProposalSumAggregateOutputType | null
  _min: ProposalMinAggregateOutputType | null
  _max: ProposalMaxAggregateOutputType | null
}

export type ProposalAvgAggregateOutputType = {
  proposedBudget: runtime.Decimal | null
  estimatedDuration: number | null
}

export type ProposalSumAggregateOutputType = {
  proposedBudget: runtime.Decimal | null
  estimatedDuration: number | null
}

export type ProposalMinAggregateOutputType = {
  id: string | null
  projectId: string | null
  freelancerId: string | null
  message: string | null
  proposedBudget: runtime.Decimal | null
  estimatedDuration: number | null
  status: $Enums.ProposalStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProposalMaxAggregateOutputType = {
  id: string | null
  projectId: string | null
  freelancerId: string | null
  message: string | null
  proposedBudget: runtime.Decimal | null
  estimatedDuration: number | null
  status: $Enums.ProposalStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProposalCountAggregateOutputType = {
  id: number
  projectId: number
  freelancerId: number
  message: number
  proposedBudget: number
  estimatedDuration: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProposalAvgAggregateInputType = {
  proposedBudget?: true
  estimatedDuration?: true
}

export type ProposalSumAggregateInputType = {
  proposedBudget?: true
  estimatedDuration?: true
}

export type ProposalMinAggregateInputType = {
  id?: true
  projectId?: true
  freelancerId?: true
  message?: true
  proposedBudget?: true
  estimatedDuration?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ProposalMaxAggregateInputType = {
  id?: true
  projectId?: true
  freelancerId?: true
  message?: true
  proposedBudget?: true
  estimatedDuration?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type ProposalCountAggregateInputType = {
  id?: true
  projectId?: true
  freelancerId?: true
  message?: true
  proposedBudget?: true
  estimatedDuration?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProposalAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Proposal to aggregate.
   */
  where?: Prisma.ProposalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proposals to fetch.
   */
  orderBy?: Prisma.ProposalOrderByWithRelationInput | Prisma.ProposalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProposalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proposals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proposals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Proposals
  **/
  _count?: true | ProposalCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProposalAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProposalSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProposalMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProposalMaxAggregateInputType
}

export type GetProposalAggregateType<T extends ProposalAggregateArgs> = {
      [P in keyof T & keyof AggregateProposal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProposal[P]>
    : Prisma.GetScalarType<T[P], AggregateProposal[P]>
}




export type ProposalGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProposalWhereInput
  orderBy?: Prisma.ProposalOrderByWithAggregationInput | Prisma.ProposalOrderByWithAggregationInput[]
  by: Prisma.ProposalScalarFieldEnum[] | Prisma.ProposalScalarFieldEnum
  having?: Prisma.ProposalScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProposalCountAggregateInputType | true
  _avg?: ProposalAvgAggregateInputType
  _sum?: ProposalSumAggregateInputType
  _min?: ProposalMinAggregateInputType
  _max?: ProposalMaxAggregateInputType
}

export type ProposalGroupByOutputType = {
  id: string
  projectId: string
  freelancerId: string
  message: string
  proposedBudget: runtime.Decimal | null
  estimatedDuration: number | null
  status: $Enums.ProposalStatus
  createdAt: Date
  updatedAt: Date
  _count: ProposalCountAggregateOutputType | null
  _avg: ProposalAvgAggregateOutputType | null
  _sum: ProposalSumAggregateOutputType | null
  _min: ProposalMinAggregateOutputType | null
  _max: ProposalMaxAggregateOutputType | null
}

type GetProposalGroupByPayload<T extends ProposalGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProposalGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProposalGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProposalGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProposalGroupByOutputType[P]>
      }
    >
  >



export type ProposalWhereInput = {
  AND?: Prisma.ProposalWhereInput | Prisma.ProposalWhereInput[]
  OR?: Prisma.ProposalWhereInput[]
  NOT?: Prisma.ProposalWhereInput | Prisma.ProposalWhereInput[]
  id?: Prisma.StringFilter<"Proposal"> | string
  projectId?: Prisma.StringFilter<"Proposal"> | string
  freelancerId?: Prisma.StringFilter<"Proposal"> | string
  message?: Prisma.StringFilter<"Proposal"> | string
  proposedBudget?: Prisma.DecimalNullableFilter<"Proposal"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.IntNullableFilter<"Proposal"> | number | null
  status?: Prisma.EnumProposalStatusFilter<"Proposal"> | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFilter<"Proposal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Proposal"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  freelancer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  contracts?: Prisma.ContractListRelationFilter
}

export type ProposalOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  proposedBudget?: Prisma.SortOrderInput | Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
  freelancer?: Prisma.UserOrderByWithRelationInput
  contracts?: Prisma.ContractOrderByRelationAggregateInput
}

export type ProposalWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProposalWhereInput | Prisma.ProposalWhereInput[]
  OR?: Prisma.ProposalWhereInput[]
  NOT?: Prisma.ProposalWhereInput | Prisma.ProposalWhereInput[]
  projectId?: Prisma.StringFilter<"Proposal"> | string
  freelancerId?: Prisma.StringFilter<"Proposal"> | string
  message?: Prisma.StringFilter<"Proposal"> | string
  proposedBudget?: Prisma.DecimalNullableFilter<"Proposal"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.IntNullableFilter<"Proposal"> | number | null
  status?: Prisma.EnumProposalStatusFilter<"Proposal"> | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFilter<"Proposal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Proposal"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
  freelancer?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  contracts?: Prisma.ContractListRelationFilter
}, "id">

export type ProposalOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  proposedBudget?: Prisma.SortOrderInput | Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProposalCountOrderByAggregateInput
  _avg?: Prisma.ProposalAvgOrderByAggregateInput
  _max?: Prisma.ProposalMaxOrderByAggregateInput
  _min?: Prisma.ProposalMinOrderByAggregateInput
  _sum?: Prisma.ProposalSumOrderByAggregateInput
}

export type ProposalScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProposalScalarWhereWithAggregatesInput | Prisma.ProposalScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProposalScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProposalScalarWhereWithAggregatesInput | Prisma.ProposalScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Proposal"> | string
  projectId?: Prisma.StringWithAggregatesFilter<"Proposal"> | string
  freelancerId?: Prisma.StringWithAggregatesFilter<"Proposal"> | string
  message?: Prisma.StringWithAggregatesFilter<"Proposal"> | string
  proposedBudget?: Prisma.DecimalNullableWithAggregatesFilter<"Proposal"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.IntNullableWithAggregatesFilter<"Proposal"> | number | null
  status?: Prisma.EnumProposalStatusWithAggregatesFilter<"Proposal"> | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Proposal"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Proposal"> | Date | string
}

export type ProposalCreateInput = {
  id?: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutProposalsInput
  freelancer: Prisma.UserCreateNestedOneWithoutProposalsInput
  contracts?: Prisma.ContractCreateNestedManyWithoutProposalInput
}

export type ProposalUncheckedCreateInput = {
  id?: string
  projectId: string
  freelancerId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  contracts?: Prisma.ContractUncheckedCreateNestedManyWithoutProposalInput
}

export type ProposalUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutProposalsNestedInput
  freelancer?: Prisma.UserUpdateOneRequiredWithoutProposalsNestedInput
  contracts?: Prisma.ContractUpdateManyWithoutProposalNestedInput
}

export type ProposalUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contracts?: Prisma.ContractUncheckedUpdateManyWithoutProposalNestedInput
}

export type ProposalCreateManyInput = {
  id?: string
  projectId: string
  freelancerId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProposalUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProposalUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProposalListRelationFilter = {
  every?: Prisma.ProposalWhereInput
  some?: Prisma.ProposalWhereInput
  none?: Prisma.ProposalWhereInput
}

export type ProposalOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProposalCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  proposedBudget?: Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProposalAvgOrderByAggregateInput = {
  proposedBudget?: Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrder
}

export type ProposalMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  proposedBudget?: Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProposalMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  freelancerId?: Prisma.SortOrder
  message?: Prisma.SortOrder
  proposedBudget?: Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProposalSumOrderByAggregateInput = {
  proposedBudget?: Prisma.SortOrder
  estimatedDuration?: Prisma.SortOrder
}

export type ProposalScalarRelationFilter = {
  is?: Prisma.ProposalWhereInput
  isNot?: Prisma.ProposalWhereInput
}

export type ProposalCreateNestedManyWithoutFreelancerInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutFreelancerInput, Prisma.ProposalUncheckedCreateWithoutFreelancerInput> | Prisma.ProposalCreateWithoutFreelancerInput[] | Prisma.ProposalUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutFreelancerInput | Prisma.ProposalCreateOrConnectWithoutFreelancerInput[]
  createMany?: Prisma.ProposalCreateManyFreelancerInputEnvelope
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
}

export type ProposalUncheckedCreateNestedManyWithoutFreelancerInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutFreelancerInput, Prisma.ProposalUncheckedCreateWithoutFreelancerInput> | Prisma.ProposalCreateWithoutFreelancerInput[] | Prisma.ProposalUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutFreelancerInput | Prisma.ProposalCreateOrConnectWithoutFreelancerInput[]
  createMany?: Prisma.ProposalCreateManyFreelancerInputEnvelope
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
}

export type ProposalUpdateManyWithoutFreelancerNestedInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutFreelancerInput, Prisma.ProposalUncheckedCreateWithoutFreelancerInput> | Prisma.ProposalCreateWithoutFreelancerInput[] | Prisma.ProposalUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutFreelancerInput | Prisma.ProposalCreateOrConnectWithoutFreelancerInput[]
  upsert?: Prisma.ProposalUpsertWithWhereUniqueWithoutFreelancerInput | Prisma.ProposalUpsertWithWhereUniqueWithoutFreelancerInput[]
  createMany?: Prisma.ProposalCreateManyFreelancerInputEnvelope
  set?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  disconnect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  delete?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  update?: Prisma.ProposalUpdateWithWhereUniqueWithoutFreelancerInput | Prisma.ProposalUpdateWithWhereUniqueWithoutFreelancerInput[]
  updateMany?: Prisma.ProposalUpdateManyWithWhereWithoutFreelancerInput | Prisma.ProposalUpdateManyWithWhereWithoutFreelancerInput[]
  deleteMany?: Prisma.ProposalScalarWhereInput | Prisma.ProposalScalarWhereInput[]
}

export type ProposalUncheckedUpdateManyWithoutFreelancerNestedInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutFreelancerInput, Prisma.ProposalUncheckedCreateWithoutFreelancerInput> | Prisma.ProposalCreateWithoutFreelancerInput[] | Prisma.ProposalUncheckedCreateWithoutFreelancerInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutFreelancerInput | Prisma.ProposalCreateOrConnectWithoutFreelancerInput[]
  upsert?: Prisma.ProposalUpsertWithWhereUniqueWithoutFreelancerInput | Prisma.ProposalUpsertWithWhereUniqueWithoutFreelancerInput[]
  createMany?: Prisma.ProposalCreateManyFreelancerInputEnvelope
  set?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  disconnect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  delete?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  update?: Prisma.ProposalUpdateWithWhereUniqueWithoutFreelancerInput | Prisma.ProposalUpdateWithWhereUniqueWithoutFreelancerInput[]
  updateMany?: Prisma.ProposalUpdateManyWithWhereWithoutFreelancerInput | Prisma.ProposalUpdateManyWithWhereWithoutFreelancerInput[]
  deleteMany?: Prisma.ProposalScalarWhereInput | Prisma.ProposalScalarWhereInput[]
}

export type ProposalCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutProjectInput, Prisma.ProposalUncheckedCreateWithoutProjectInput> | Prisma.ProposalCreateWithoutProjectInput[] | Prisma.ProposalUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutProjectInput | Prisma.ProposalCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProposalCreateManyProjectInputEnvelope
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
}

export type ProposalUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutProjectInput, Prisma.ProposalUncheckedCreateWithoutProjectInput> | Prisma.ProposalCreateWithoutProjectInput[] | Prisma.ProposalUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutProjectInput | Prisma.ProposalCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProposalCreateManyProjectInputEnvelope
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
}

export type ProposalUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutProjectInput, Prisma.ProposalUncheckedCreateWithoutProjectInput> | Prisma.ProposalCreateWithoutProjectInput[] | Prisma.ProposalUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutProjectInput | Prisma.ProposalCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProposalUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProposalUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProposalCreateManyProjectInputEnvelope
  set?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  disconnect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  delete?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  update?: Prisma.ProposalUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProposalUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProposalUpdateManyWithWhereWithoutProjectInput | Prisma.ProposalUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProposalScalarWhereInput | Prisma.ProposalScalarWhereInput[]
}

export type ProposalUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutProjectInput, Prisma.ProposalUncheckedCreateWithoutProjectInput> | Prisma.ProposalCreateWithoutProjectInput[] | Prisma.ProposalUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutProjectInput | Prisma.ProposalCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProposalUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProposalUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProposalCreateManyProjectInputEnvelope
  set?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  disconnect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  delete?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  connect?: Prisma.ProposalWhereUniqueInput | Prisma.ProposalWhereUniqueInput[]
  update?: Prisma.ProposalUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProposalUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProposalUpdateManyWithWhereWithoutProjectInput | Prisma.ProposalUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProposalScalarWhereInput | Prisma.ProposalScalarWhereInput[]
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumProposalStatusFieldUpdateOperationsInput = {
  set?: $Enums.ProposalStatus
}

export type ProposalCreateNestedOneWithoutContractsInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutContractsInput, Prisma.ProposalUncheckedCreateWithoutContractsInput>
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutContractsInput
  connect?: Prisma.ProposalWhereUniqueInput
}

export type ProposalUpdateOneRequiredWithoutContractsNestedInput = {
  create?: Prisma.XOR<Prisma.ProposalCreateWithoutContractsInput, Prisma.ProposalUncheckedCreateWithoutContractsInput>
  connectOrCreate?: Prisma.ProposalCreateOrConnectWithoutContractsInput
  upsert?: Prisma.ProposalUpsertWithoutContractsInput
  connect?: Prisma.ProposalWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProposalUpdateToOneWithWhereWithoutContractsInput, Prisma.ProposalUpdateWithoutContractsInput>, Prisma.ProposalUncheckedUpdateWithoutContractsInput>
}

export type ProposalCreateWithoutFreelancerInput = {
  id?: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutProposalsInput
  contracts?: Prisma.ContractCreateNestedManyWithoutProposalInput
}

export type ProposalUncheckedCreateWithoutFreelancerInput = {
  id?: string
  projectId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  contracts?: Prisma.ContractUncheckedCreateNestedManyWithoutProposalInput
}

export type ProposalCreateOrConnectWithoutFreelancerInput = {
  where: Prisma.ProposalWhereUniqueInput
  create: Prisma.XOR<Prisma.ProposalCreateWithoutFreelancerInput, Prisma.ProposalUncheckedCreateWithoutFreelancerInput>
}

export type ProposalCreateManyFreelancerInputEnvelope = {
  data: Prisma.ProposalCreateManyFreelancerInput | Prisma.ProposalCreateManyFreelancerInput[]
  skipDuplicates?: boolean
}

export type ProposalUpsertWithWhereUniqueWithoutFreelancerInput = {
  where: Prisma.ProposalWhereUniqueInput
  update: Prisma.XOR<Prisma.ProposalUpdateWithoutFreelancerInput, Prisma.ProposalUncheckedUpdateWithoutFreelancerInput>
  create: Prisma.XOR<Prisma.ProposalCreateWithoutFreelancerInput, Prisma.ProposalUncheckedCreateWithoutFreelancerInput>
}

export type ProposalUpdateWithWhereUniqueWithoutFreelancerInput = {
  where: Prisma.ProposalWhereUniqueInput
  data: Prisma.XOR<Prisma.ProposalUpdateWithoutFreelancerInput, Prisma.ProposalUncheckedUpdateWithoutFreelancerInput>
}

export type ProposalUpdateManyWithWhereWithoutFreelancerInput = {
  where: Prisma.ProposalScalarWhereInput
  data: Prisma.XOR<Prisma.ProposalUpdateManyMutationInput, Prisma.ProposalUncheckedUpdateManyWithoutFreelancerInput>
}

export type ProposalScalarWhereInput = {
  AND?: Prisma.ProposalScalarWhereInput | Prisma.ProposalScalarWhereInput[]
  OR?: Prisma.ProposalScalarWhereInput[]
  NOT?: Prisma.ProposalScalarWhereInput | Prisma.ProposalScalarWhereInput[]
  id?: Prisma.StringFilter<"Proposal"> | string
  projectId?: Prisma.StringFilter<"Proposal"> | string
  freelancerId?: Prisma.StringFilter<"Proposal"> | string
  message?: Prisma.StringFilter<"Proposal"> | string
  proposedBudget?: Prisma.DecimalNullableFilter<"Proposal"> | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.IntNullableFilter<"Proposal"> | number | null
  status?: Prisma.EnumProposalStatusFilter<"Proposal"> | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFilter<"Proposal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Proposal"> | Date | string
}

export type ProposalCreateWithoutProjectInput = {
  id?: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  freelancer: Prisma.UserCreateNestedOneWithoutProposalsInput
  contracts?: Prisma.ContractCreateNestedManyWithoutProposalInput
}

export type ProposalUncheckedCreateWithoutProjectInput = {
  id?: string
  freelancerId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  contracts?: Prisma.ContractUncheckedCreateNestedManyWithoutProposalInput
}

export type ProposalCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProposalWhereUniqueInput
  create: Prisma.XOR<Prisma.ProposalCreateWithoutProjectInput, Prisma.ProposalUncheckedCreateWithoutProjectInput>
}

export type ProposalCreateManyProjectInputEnvelope = {
  data: Prisma.ProposalCreateManyProjectInput | Prisma.ProposalCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProposalUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProposalWhereUniqueInput
  update: Prisma.XOR<Prisma.ProposalUpdateWithoutProjectInput, Prisma.ProposalUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProposalCreateWithoutProjectInput, Prisma.ProposalUncheckedCreateWithoutProjectInput>
}

export type ProposalUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProposalWhereUniqueInput
  data: Prisma.XOR<Prisma.ProposalUpdateWithoutProjectInput, Prisma.ProposalUncheckedUpdateWithoutProjectInput>
}

export type ProposalUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProposalScalarWhereInput
  data: Prisma.XOR<Prisma.ProposalUpdateManyMutationInput, Prisma.ProposalUncheckedUpdateManyWithoutProjectInput>
}

export type ProposalCreateWithoutContractsInput = {
  id?: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutProposalsInput
  freelancer: Prisma.UserCreateNestedOneWithoutProposalsInput
}

export type ProposalUncheckedCreateWithoutContractsInput = {
  id?: string
  projectId: string
  freelancerId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProposalCreateOrConnectWithoutContractsInput = {
  where: Prisma.ProposalWhereUniqueInput
  create: Prisma.XOR<Prisma.ProposalCreateWithoutContractsInput, Prisma.ProposalUncheckedCreateWithoutContractsInput>
}

export type ProposalUpsertWithoutContractsInput = {
  update: Prisma.XOR<Prisma.ProposalUpdateWithoutContractsInput, Prisma.ProposalUncheckedUpdateWithoutContractsInput>
  create: Prisma.XOR<Prisma.ProposalCreateWithoutContractsInput, Prisma.ProposalUncheckedCreateWithoutContractsInput>
  where?: Prisma.ProposalWhereInput
}

export type ProposalUpdateToOneWithWhereWithoutContractsInput = {
  where?: Prisma.ProposalWhereInput
  data: Prisma.XOR<Prisma.ProposalUpdateWithoutContractsInput, Prisma.ProposalUncheckedUpdateWithoutContractsInput>
}

export type ProposalUpdateWithoutContractsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutProposalsNestedInput
  freelancer?: Prisma.UserUpdateOneRequiredWithoutProposalsNestedInput
}

export type ProposalUncheckedUpdateWithoutContractsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProposalCreateManyFreelancerInput = {
  id?: string
  projectId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProposalUpdateWithoutFreelancerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutProposalsNestedInput
  contracts?: Prisma.ContractUpdateManyWithoutProposalNestedInput
}

export type ProposalUncheckedUpdateWithoutFreelancerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contracts?: Prisma.ContractUncheckedUpdateManyWithoutProposalNestedInput
}

export type ProposalUncheckedUpdateManyWithoutFreelancerInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProposalCreateManyProjectInput = {
  id?: string
  freelancerId: string
  message: string
  proposedBudget?: runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: number | null
  status?: $Enums.ProposalStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProposalUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  freelancer?: Prisma.UserUpdateOneRequiredWithoutProposalsNestedInput
  contracts?: Prisma.ContractUpdateManyWithoutProposalNestedInput
}

export type ProposalUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contracts?: Prisma.ContractUncheckedUpdateManyWithoutProposalNestedInput
}

export type ProposalUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  freelancerId?: Prisma.StringFieldUpdateOperationsInput | string
  message?: Prisma.StringFieldUpdateOperationsInput | string
  proposedBudget?: Prisma.NullableDecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string | null
  estimatedDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  status?: Prisma.EnumProposalStatusFieldUpdateOperationsInput | $Enums.ProposalStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProposalCountOutputType
 */

export type ProposalCountOutputType = {
  contracts: number
}

export type ProposalCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contracts?: boolean | ProposalCountOutputTypeCountContractsArgs
}

/**
 * ProposalCountOutputType without action
 */
export type ProposalCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProposalCountOutputType
   */
  select?: Prisma.ProposalCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProposalCountOutputType without action
 */
export type ProposalCountOutputTypeCountContractsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContractWhereInput
}


export type ProposalSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  freelancerId?: boolean
  message?: boolean
  proposedBudget?: boolean
  estimatedDuration?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contracts?: boolean | Prisma.Proposal$contractsArgs<ExtArgs>
  _count?: boolean | Prisma.ProposalCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proposal"]>

export type ProposalSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  freelancerId?: boolean
  message?: boolean
  proposedBudget?: boolean
  estimatedDuration?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proposal"]>

export type ProposalSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  projectId?: boolean
  freelancerId?: boolean
  message?: boolean
  proposedBudget?: boolean
  estimatedDuration?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["proposal"]>

export type ProposalSelectScalar = {
  id?: boolean
  projectId?: boolean
  freelancerId?: boolean
  message?: boolean
  proposedBudget?: boolean
  estimatedDuration?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProposalOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "projectId" | "freelancerId" | "message" | "proposedBudget" | "estimatedDuration" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["proposal"]>
export type ProposalInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  contracts?: boolean | Prisma.Proposal$contractsArgs<ExtArgs>
  _count?: boolean | Prisma.ProposalCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProposalIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type ProposalIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
  freelancer?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $ProposalPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Proposal"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
    freelancer: Prisma.$UserPayload<ExtArgs>
    contracts: Prisma.$ContractPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    projectId: string
    freelancerId: string
    message: string
    proposedBudget: runtime.Decimal | null
    estimatedDuration: number | null
    status: $Enums.ProposalStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["proposal"]>
  composites: {}
}

export type ProposalGetPayload<S extends boolean | null | undefined | ProposalDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProposalPayload, S>

export type ProposalCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProposalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProposalCountAggregateInputType | true
  }

export interface ProposalDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposal'], meta: { name: 'Proposal' } }
  /**
   * Find zero or one Proposal that matches the filter.
   * @param {ProposalFindUniqueArgs} args - Arguments to find a Proposal
   * @example
   * // Get one Proposal
   * const proposal = await prisma.proposal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProposalFindUniqueArgs>(args: Prisma.SelectSubset<T, ProposalFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Proposal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProposalFindUniqueOrThrowArgs} args - Arguments to find a Proposal
   * @example
   * // Get one Proposal
   * const proposal = await prisma.proposal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProposalFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProposalFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Proposal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalFindFirstArgs} args - Arguments to find a Proposal
   * @example
   * // Get one Proposal
   * const proposal = await prisma.proposal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProposalFindFirstArgs>(args?: Prisma.SelectSubset<T, ProposalFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Proposal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalFindFirstOrThrowArgs} args - Arguments to find a Proposal
   * @example
   * // Get one Proposal
   * const proposal = await prisma.proposal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProposalFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProposalFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Proposals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Proposals
   * const proposals = await prisma.proposal.findMany()
   * 
   * // Get first 10 Proposals
   * const proposals = await prisma.proposal.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const proposalWithIdOnly = await prisma.proposal.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProposalFindManyArgs>(args?: Prisma.SelectSubset<T, ProposalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Proposal.
   * @param {ProposalCreateArgs} args - Arguments to create a Proposal.
   * @example
   * // Create one Proposal
   * const Proposal = await prisma.proposal.create({
   *   data: {
   *     // ... data to create a Proposal
   *   }
   * })
   * 
   */
  create<T extends ProposalCreateArgs>(args: Prisma.SelectSubset<T, ProposalCreateArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Proposals.
   * @param {ProposalCreateManyArgs} args - Arguments to create many Proposals.
   * @example
   * // Create many Proposals
   * const proposal = await prisma.proposal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProposalCreateManyArgs>(args?: Prisma.SelectSubset<T, ProposalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Proposals and returns the data saved in the database.
   * @param {ProposalCreateManyAndReturnArgs} args - Arguments to create many Proposals.
   * @example
   * // Create many Proposals
   * const proposal = await prisma.proposal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Proposals and only return the `id`
   * const proposalWithIdOnly = await prisma.proposal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProposalCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProposalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Proposal.
   * @param {ProposalDeleteArgs} args - Arguments to delete one Proposal.
   * @example
   * // Delete one Proposal
   * const Proposal = await prisma.proposal.delete({
   *   where: {
   *     // ... filter to delete one Proposal
   *   }
   * })
   * 
   */
  delete<T extends ProposalDeleteArgs>(args: Prisma.SelectSubset<T, ProposalDeleteArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Proposal.
   * @param {ProposalUpdateArgs} args - Arguments to update one Proposal.
   * @example
   * // Update one Proposal
   * const proposal = await prisma.proposal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProposalUpdateArgs>(args: Prisma.SelectSubset<T, ProposalUpdateArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Proposals.
   * @param {ProposalDeleteManyArgs} args - Arguments to filter Proposals to delete.
   * @example
   * // Delete a few Proposals
   * const { count } = await prisma.proposal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProposalDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProposalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Proposals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Proposals
   * const proposal = await prisma.proposal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProposalUpdateManyArgs>(args: Prisma.SelectSubset<T, ProposalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Proposals and returns the data updated in the database.
   * @param {ProposalUpdateManyAndReturnArgs} args - Arguments to update many Proposals.
   * @example
   * // Update many Proposals
   * const proposal = await prisma.proposal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Proposals and only return the `id`
   * const proposalWithIdOnly = await prisma.proposal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProposalUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProposalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Proposal.
   * @param {ProposalUpsertArgs} args - Arguments to update or create a Proposal.
   * @example
   * // Update or create a Proposal
   * const proposal = await prisma.proposal.upsert({
   *   create: {
   *     // ... data to create a Proposal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Proposal we want to update
   *   }
   * })
   */
  upsert<T extends ProposalUpsertArgs>(args: Prisma.SelectSubset<T, ProposalUpsertArgs<ExtArgs>>): Prisma.Prisma__ProposalClient<runtime.Types.Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Proposals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalCountArgs} args - Arguments to filter Proposals to count.
   * @example
   * // Count the number of Proposals
   * const count = await prisma.proposal.count({
   *   where: {
   *     // ... the filter for the Proposals we want to count
   *   }
   * })
  **/
  count<T extends ProposalCountArgs>(
    args?: Prisma.Subset<T, ProposalCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProposalCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Proposal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProposalAggregateArgs>(args: Prisma.Subset<T, ProposalAggregateArgs>): Prisma.PrismaPromise<GetProposalAggregateType<T>>

  /**
   * Group by Proposal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProposalGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProposalGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProposalGroupByArgs['orderBy'] }
      : { orderBy?: ProposalGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProposalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Proposal model
 */
readonly fields: ProposalFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Proposal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProposalClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  freelancer<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  contracts<T extends Prisma.Proposal$contractsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Proposal$contractsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContractPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Proposal model
 */
export interface ProposalFieldRefs {
  readonly id: Prisma.FieldRef<"Proposal", 'String'>
  readonly projectId: Prisma.FieldRef<"Proposal", 'String'>
  readonly freelancerId: Prisma.FieldRef<"Proposal", 'String'>
  readonly message: Prisma.FieldRef<"Proposal", 'String'>
  readonly proposedBudget: Prisma.FieldRef<"Proposal", 'Decimal'>
  readonly estimatedDuration: Prisma.FieldRef<"Proposal", 'Int'>
  readonly status: Prisma.FieldRef<"Proposal", 'ProposalStatus'>
  readonly createdAt: Prisma.FieldRef<"Proposal", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Proposal", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Proposal findUnique
 */
export type ProposalFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * Filter, which Proposal to fetch.
   */
  where: Prisma.ProposalWhereUniqueInput
}

/**
 * Proposal findUniqueOrThrow
 */
export type ProposalFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * Filter, which Proposal to fetch.
   */
  where: Prisma.ProposalWhereUniqueInput
}

/**
 * Proposal findFirst
 */
export type ProposalFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * Filter, which Proposal to fetch.
   */
  where?: Prisma.ProposalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proposals to fetch.
   */
  orderBy?: Prisma.ProposalOrderByWithRelationInput | Prisma.ProposalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Proposals.
   */
  cursor?: Prisma.ProposalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proposals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proposals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Proposals.
   */
  distinct?: Prisma.ProposalScalarFieldEnum | Prisma.ProposalScalarFieldEnum[]
}

/**
 * Proposal findFirstOrThrow
 */
export type ProposalFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * Filter, which Proposal to fetch.
   */
  where?: Prisma.ProposalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proposals to fetch.
   */
  orderBy?: Prisma.ProposalOrderByWithRelationInput | Prisma.ProposalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Proposals.
   */
  cursor?: Prisma.ProposalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proposals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proposals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Proposals.
   */
  distinct?: Prisma.ProposalScalarFieldEnum | Prisma.ProposalScalarFieldEnum[]
}

/**
 * Proposal findMany
 */
export type ProposalFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * Filter, which Proposals to fetch.
   */
  where?: Prisma.ProposalWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Proposals to fetch.
   */
  orderBy?: Prisma.ProposalOrderByWithRelationInput | Prisma.ProposalOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Proposals.
   */
  cursor?: Prisma.ProposalWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Proposals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Proposals.
   */
  skip?: number
  distinct?: Prisma.ProposalScalarFieldEnum | Prisma.ProposalScalarFieldEnum[]
}

/**
 * Proposal create
 */
export type ProposalCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * The data needed to create a Proposal.
   */
  data: Prisma.XOR<Prisma.ProposalCreateInput, Prisma.ProposalUncheckedCreateInput>
}

/**
 * Proposal createMany
 */
export type ProposalCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Proposals.
   */
  data: Prisma.ProposalCreateManyInput | Prisma.ProposalCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Proposal createManyAndReturn
 */
export type ProposalCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * The data used to create many Proposals.
   */
  data: Prisma.ProposalCreateManyInput | Prisma.ProposalCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Proposal update
 */
export type ProposalUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * The data needed to update a Proposal.
   */
  data: Prisma.XOR<Prisma.ProposalUpdateInput, Prisma.ProposalUncheckedUpdateInput>
  /**
   * Choose, which Proposal to update.
   */
  where: Prisma.ProposalWhereUniqueInput
}

/**
 * Proposal updateMany
 */
export type ProposalUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Proposals.
   */
  data: Prisma.XOR<Prisma.ProposalUpdateManyMutationInput, Prisma.ProposalUncheckedUpdateManyInput>
  /**
   * Filter which Proposals to update
   */
  where?: Prisma.ProposalWhereInput
  /**
   * Limit how many Proposals to update.
   */
  limit?: number
}

/**
 * Proposal updateManyAndReturn
 */
export type ProposalUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * The data used to update Proposals.
   */
  data: Prisma.XOR<Prisma.ProposalUpdateManyMutationInput, Prisma.ProposalUncheckedUpdateManyInput>
  /**
   * Filter which Proposals to update
   */
  where?: Prisma.ProposalWhereInput
  /**
   * Limit how many Proposals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Proposal upsert
 */
export type ProposalUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * The filter to search for the Proposal to update in case it exists.
   */
  where: Prisma.ProposalWhereUniqueInput
  /**
   * In case the Proposal found by the `where` argument doesn't exist, create a new Proposal with this data.
   */
  create: Prisma.XOR<Prisma.ProposalCreateInput, Prisma.ProposalUncheckedCreateInput>
  /**
   * In case the Proposal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProposalUpdateInput, Prisma.ProposalUncheckedUpdateInput>
}

/**
 * Proposal delete
 */
export type ProposalDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
  /**
   * Filter which Proposal to delete.
   */
  where: Prisma.ProposalWhereUniqueInput
}

/**
 * Proposal deleteMany
 */
export type ProposalDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Proposals to delete
   */
  where?: Prisma.ProposalWhereInput
  /**
   * Limit how many Proposals to delete.
   */
  limit?: number
}

/**
 * Proposal.contracts
 */
export type Proposal$contractsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contract
   */
  select?: Prisma.ContractSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contract
   */
  omit?: Prisma.ContractOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContractInclude<ExtArgs> | null
  where?: Prisma.ContractWhereInput
  orderBy?: Prisma.ContractOrderByWithRelationInput | Prisma.ContractOrderByWithRelationInput[]
  cursor?: Prisma.ContractWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.ContractScalarFieldEnum | Prisma.ContractScalarFieldEnum[]
}

/**
 * Proposal without action
 */
export type ProposalDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Proposal
   */
  select?: Prisma.ProposalSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Proposal
   */
  omit?: Prisma.ProposalOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProposalInclude<ExtArgs> | null
}
